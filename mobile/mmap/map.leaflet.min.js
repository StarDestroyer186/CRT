function MapClassImpl(e, t, i, o, n, a) {
  (this.opts_poly = {
    strokeColor: t.lineColor || "#f00",
    strokeOpacity: t.lineOpacity || 0.8,
    strokeWeight: t.lineWidth || 4,
    strokeMovesWeight: t.lineMovesWidth || 8,
    strokeMovesColor: "green",
    point: !0,
  }),
    (this.history = n),
    (this.drivers4jb = a),
    (this.trackpts = []),
    (this.showingMarkers = []),
    (this.lastMarker = null),
    (this.animationMarker = []),
    this.markerCluster,
    (this.isClusters = !0),
    (this.isShowMarkers = !1),
    (this.isShowLabels = !0),
    (this.isShowStops = !0),
    (this.isShowEvents = !0),
    (this.isShowAngles = !0),
    (this.isShowTimes = !1),
    (this.isRoute = !0),
    (this.isSnap = !1),
    (this.isSnaping = !1),
    (this.isShowDriver = !1),
    (this.anglePoints = []),
    (this.timePoints = []),
    (this.stopPoints = []),
    (this.eventPoints = []),
    (this.averagePoints = []),
    (this.startMarker = null),
    (this.endMarker = null),
    (this.router = new L.Routing.osrmv1({
      serviceUrl: JS_ROUTING_MACHINE_URL,
    })),
    (this.routingSnapControl = null),
    (this.routingSnapRoute = null),
    (this.tracklatLngs = []),
    (this.taskPath = null),
    (this.currentZoom = t.zoom),
    (this.myLocationMarker = null),
    (this.def_save_points = 50);
  var r = window.parent;
  if (1 == o || 1 == n) {
    var s = $('<div id="legdiv" />').appendTo(e),
      l = $("<tbody></tbody>").appendTo(s),
      p = $("<tr></tr>").appendTo(l);
    $("<td width='50'></td>").text(0).appendTo(p),
      $("<td width='50'></td>").text(40).appendTo(p),
      $("<td width='50'></td>").text(80).appendTo(p),
      $("<td width='50'></td>").text(90).appendTo(p),
      $("<td width='50'></td>")
        .text("120" + r.UNIT_SPEED)
        .appendTo(p);
    var d = $("<tr></tr>").appendTo(l);
    $("<td height='8' bgcolor='#5DFEFE'></td>").appendTo(d),
      $("<td height='8' bgcolor='#0096FE'></td>").appendTo(d),
      $("<td height='8' bgcolor='#3200FF'></td>").appendTo(d),
      $("<td height='8' bgcolor='#9A009C'></td>").appendTo(d),
      $("<td height='8' bgcolor='#FF002A'></td>").appendTo(d);
  }
  if (1 == o) {
    var h = $(
        '<div id="maptools" ontouchmove="event.preventDefault();" />'
      ).appendTo(e.parentElement),
      g = ((l = $("<table></table>").appendTo(h)), $("<tr></tr>").appendTo(l));
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_asset' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_object-arrow.svg'/></td>"
    ).appendTo(g);
    var c = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_fit' class='tool_active' height='50%' width='50%' src='../img/tool_fit_assets.svg'/></td>"
    ).appendTo(c);
    var u = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_label' class='tool_active' height='50%' width='50%' src='../img/tool_tips.svg'/></td>"
    ).appendTo(u);
    var m = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_driver' style='opacity: 0.5' height='50%' width='50%' src='../img/steering_wheel_green.svg'/></td>"
    ).appendTo(m);
    var v = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_marker' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_markers.svg'/></td>"
    ).appendTo(v);
    var y = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_zone' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_zones.svg'/></td>"
    ).appendTo(y);
    var f = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_clusters' class='tool_active' height='50%' width='50%' src='../img/tool_clusters.svg'/></td>"
    ).appendTo(f);
    var w = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_street_view' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_streetview.svg'/></td>"
    ).appendTo(w);
    var T = $("<tr></tr>").appendTo(l);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_task' style='opacity: 0.5' height='50%' width='50%' src='../img/tasknew.svg'/></td>"
    ).appendTo(T);
    var k = $(
        '<div id="maptools_ext" ontouchmove="event.preventDefault();" />'
      ).appendTo(e.parentElement),
      M = $("<table></table>").appendTo(k),
      b = $("<tr></tr>").appendTo(M);
    $(
      "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_arrow' class='tool_active' height='50%' width='50%' src='../img/tool_arrow.svg'/></td>"
    ).appendTo(b),
      $(
        "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_point' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_point.svg'/></td>"
      ).appendTo(b),
      $(
        "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_stop' class='tool_active' height='50%' width='50%' src='../img/tool_stop.svg'/></td>"
      ).appendTo(b),
      $(
        "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_event' class='tool_active' height='50%' width='50%' src='../img/tool_event.svg'/></td>"
      ).appendTo(b),
      $(
        "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_route' class='tool_active' height='50%' width='50%' src='../img/tool_route.svg'/></td>"
      ).appendTo(b),
      $(
        "<td align='center' height='28px' width='28px' bgcolor='#FFFFFF'><img id='ed_snap' style='opacity: 0.5' height='50%' width='50%' src='../img/tool_snap.svg'/></td>"
      ).appendTo(b);
  }
  $(
    "<div bgcolor='#FFFFFF' id='mylocation' style='opacity: 0.5;' ontouchmove='event.preventDefault();'></div>"
  ).appendTo(e);
  var x = $(
      "<select bgcolor='#FFFFFF' id='playspeed' class='iselect' ontouchmove='event.preventDefault();'></select>"
    ).appendTo(e),
    S = $("<option></option>").appendTo(x);
  S.attr("value", 1e3),
    S.text("x1"),
    (S = $("<option></option>").appendTo(x)).attr("value", 500),
    S.text("x2"),
    (S = $("<option></option>").appendTo(x)).attr("value", 300),
    S.text("x3"),
    (S = $("<option></option>").appendTo(x)).attr("value", 100),
    S.text("x4");
  var _,
    F,
    A,
    P,
    C,
    E = L.tileLayer("https://{s}.tile.osm.org/{z}/{x}/{y}.png", {
      id: "mapbox.light",
      minZoom: 2,
      maxZoom: 20,
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
    }),
    D = L.tileLayer(
      "https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}",
      {
        minZoom: 2,
        maxZoom: 19,
        attribution:
          "Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community",
      }
    ),
    I = L.tileLayer(
      "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
      {
        minZoom: 2,
        maxZoom: 19,
        attribution:
          "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community",
      }
    );
  0 == JS_GOOGLE_TYPE
    ? ((_ = L.tileLayer(
        "https://{s}.google.com/vt/lyrs=m&hl=" +
          JS_CURRENT_LANG +
          "&x={x}&y={y}&z={z}",
        {
          maxZoom: 20,
          subdomains: ["mt0", "mt1", "mt2", "mt3"],
          attribution: "Google Streets",
        }
      )),
      (F = L.tileLayer(
        "https://{s}.google.com/vt/lyrs=s,h&hl=" +
          JS_CURRENT_LANG +
          "&x={x}&y={y}&z={z}",
        {
          maxZoom: 20,
          subdomains: ["mt0", "mt1", "mt2", "mt3"],
          attribution: "Google Hybrid",
        }
      )),
      (A = L.tileLayer(
        "https://{s}.google.com/vt/lyrs=s&hl=" +
          JS_CURRENT_LANG +
          "&x={x}&y={y}&z={z}",
        {
          maxZoom: 20,
          subdomains: ["mt0", "mt1", "mt2", "mt3"],
          attribution: "Google Satellite",
        }
      )),
      (P = L.tileLayer(
        "https://{s}.google.com/vt/lyrs=p&hl=" +
          JS_CURRENT_LANG +
          "&x={x}&y={y}&z={z}",
        {
          maxZoom: 20,
          subdomains: ["mt0", "mt1", "mt2", "mt3"],
          attribution: "Google Terrain",
        }
      )),
      (C = L.tileLayer(
        "https://{s}.google.com/vt/lyrs=m@159000000,traffic|seconds_into_week:-1&hl=" +
          JS_CURRENT_LANG +
          "&x={x}&y={y}&z={z}",
        {
          maxZoom: 20,
          subdomains: ["mt0", "mt1", "mt2", "mt3"],
          attribution: "Google Traffic",
        }
      )))
    : ((_ = L.gridLayer.googleMutant({ maxZoom: 24, type: "roadmap" })),
      (F = L.gridLayer.googleMutant({ maxZoom: 24, type: "hybrid" })),
      (A = L.gridLayer.googleMutant({ maxZoom: 24, type: "satellite" })),
      (P = L.gridLayer.googleMutant({ maxZoom: 24, type: "terrain" })),
      (C = L.gridLayer.googleMutant({
        maxZoom: 24,
        type: "roadmap",
      })).addGoogleLayer("TrafficLayer"));
  var G = L.tileLayer(
      "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
      { maxZoom: 20, id: "mapbox/streets-v11", accessToken: JS_MAPBOX_KEY }
    ),
    N = L.tileLayer(
      "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}",
      { maxZoom: 20, id: "mapbox.satellite", accessToken: JS_MAPBOX_KEY }
    ),
    R =
      (new L.tileLayer.baidu({ layer: "vec" }),
      new L.tileLayer.baidu({ layer: "img" }),
      L.tileLayer(
        "http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}",
        { maxZoom: 20, minZoom: 2, subdomains: ["1", "2", "3", "4"] }
      )),
    O = new L.BingLayer(JS_BING_KEY, {
      type: "RoadOnDemand",
      minZoom: 2,
      maxZoom: 20,
    }),
    z = new L.BingLayer(JS_BING_KEY, {
      type: "AerialWithLabels",
      minZoom: 2,
      maxZoom: 20,
    }),
    Z = L.tileLayer("http://tiles.openseamap.org/seamark/{z}/{x}/{y}.png", {
      maxZoom: 20,
      attribution:
        'Map data: &copy; <a href="http://www.openseamap.org">OpenSeaMap</a> contributors',
    }),
    J = L.tileLayer(
      "https://{s}.tile.maps.openaip.net/geowebcache/service/tms/1.0.0/openaip_basemap@EPSG%3A900913@png/{z}/{x}/{y}.{ext}",
      {
        attribution:
          '<a href="https://www.openaip.net/">openAIP Data</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-NC-SA</a>)',
        ext: "png",
        minZoom: 2,
        maxZoom: 20,
        tms: !0,
        detectRetina: !0,
        subdomains: "12",
      }
    ),
    U = L.tileLayer(
      "https://map1.vis.earthdata.nasa.gov/wmts-webmerc/MODIS_Terra_Chlorophyll_A/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}",
      {
        attribution:
          'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov">ESDIS</a>) with funding provided by NASA/HQ.',
        bounds: [
          [-85.0511287776, -179.999999975],
          [85.0511287776, 179.999999975],
        ],
        minZoom: 1,
        maxZoom: 7,
        format: "png",
        time: "",
        tilematrixset: "GoogleMapsCompatible_Level",
        opacity: 0.75,
      }
    ),
    B = L.tileLayer(
      "https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png",
      {
        maxZoom: 20,
        attribution:
          'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors | Map style: &copy; <a href="https://www.OpenRailwayMap.org">OpenRailwayMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)',
      }
    );
  this.wndMap = L.map(e, {
    editable: !0,
    center: [t.centerLat, t.centerLng],
    zoom: 1,
    minZoom: 2,
    maxZoom: 20,
    attributionControl: !1,
    bounceAtZoomLimits: !1,
    layers: [_],
    fullscreenControl: !0,
    fullscreenControlOptions: {
      position: "topleft",
      title: JS_FULL_SCREEN,
      forceSeparateButton: !1,
      forcePseudoFullscreen: !0,
    },
    dragging: !0,
    tap: !0,
    preferCanvas: !0,
    renderer: L.canvas(),
  });
  var W = this.wndMap,
    H = {
      "Google Streets": _,
      "Google Hybrid": F,
      "Google Satellite": A,
      "Google Terrain": P,
      "Google Traffic": C,
      OSM: E,
      "Bing Road": O,
      "Bing Aerial": z,
      "Mapbox Streets": G,
      "Mapbox Satellite": N,
      "Esri WorldTopoMap": D,
      "Esri WorldImagery": I,
      高德地图: R,
    },
    V = {
      "OpenSea Layer": Z,
      "OpenAIP Layer": J,
      "NASAGIBS Layer": U,
      "Open Railway Layer": B,
    };
  L.control.layers(H, V, { collapsed: !0 }).addTo(W);
  var K = this;
  (this.markerCluster = L.markerClusterGroup({
    animate: !0,
    animateAddingMarkers: !0,
    removeOutsideVisibleBounds: !0,
    disableClusteringAtZoom: 20,
    maxClusterRadius: 80,
    zoomToBoundsOnClick: !1,
    iconCreateFunction: function (e) {
      var t = e.getAllChildMarkers(),
        i = t.length,
        o = (function (e) {
          if (!e.data || !e.valueFunc) return "";
          var t = e.data,
            i = e.valueFunc,
            o = e.outerRadius ? e.outerRadius : 28,
            n = e.innerRadius ? e.innerRadius : o - 10,
            a = e.strokeWidth ? e.strokeWidth : 1,
            r = e.pathClassFunc
              ? e.pathClassFunc
              : function () {
                  return "";
                },
            s = e.pathTitleFunc
              ? e.pathTitleFunc
              : function () {
                  return "";
                },
            l = e.pieClass ? e.pieClass : "marker-cluster-pie",
            p = e.pieLabel ? e.pieLabel : d3.sum(t, i),
            d = e.pieLabelClass ? e.pieLabelClass : "marker-cluster-pie-label",
            h = o + a,
            g = 2 * h,
            c = g,
            u = d3.layout.pie(),
            m = d3.svg.arc().innerRadius(n).outerRadius(o),
            v = document.createElementNS(d3.ns.prefix.svg, "svg"),
            y = d3
              .select(v)
              .data([t])
              .attr("class", l)
              .attr("width", g)
              .attr("height", c);
          return (
            y
              .selectAll("g.arc")
              .data(u.value(i))
              .enter()
              .append("svg:g")
              .attr("class", "arc")
              .attr("transform", "translate(" + h + "," + h + ")")
              .append("svg:path")
              .attr("class", r)
              .attr("stroke-width", a)
              .attr("d", m)
              .append("svg:title")
              .text(s),
            y
              .append("circle")
              .attr("cx", h)
              .attr("cy", h)
              .attr("r", 12)
              .attr("fill", "#F1F1F1"),
            y
              .append("text")
              .attr("x", h)
              .attr("y", h)
              .attr("class", d)
              .attr("text-anchor", "middle")
              .attr("dy", ".3em")
              .text(p),
            (L = v),
            void 0 !== window.XMLSerializer
              ? new window.XMLSerializer().serializeToString(L)
              : void 0 !== L.xml
              ? L.xml
              : ""
          );
          var L;
        })({
          data: d3
            .nest()
            .key(function (e) {
              return e.properties.mt;
            })
            .entries(t, d3.map),
          valueFunc: function (e) {
            return e.values.length;
          },
          strokeWidth: 1,
          outerRadius: 20,
          innerRadius: 12,
          pieClass: "cluster-pie",
          pieLabel: i,
          pieLabelClass: "marker-cluster-pie-label",
          pathClassFunc: function (e) {
            return "category-" + e.data.key;
          },
        });
      return new L.DivIcon({
        html: o,
        className: "marker-cluster",
        iconSize: new L.Point(42, 42),
      });
    },
  })),
    W.addLayer(this.markerCluster),
    this.markerCluster.on("animationend", function (e) {
      K.StopAnimationMarker(!0);
    }),
    (this.firstTime = 0),
    this.markerCluster.on("clusterclick", function (e) {
      var t = Date.parse(new Date());
      if (t - K.firstTime < 1500) (K.firstTime = 0), e.layer.zoomToBounds();
      else {
        K.firstTime = t;
        var i = e.layer.getAllChildMarkers();
        ($popupTable = $('<table class="tree_table"><table>')),
          (l = $("<tbody></tbody>").appendTo($popupTable));
        i.forEach(function (e) {
          var t = e.properties.sta,
            i = e.properties.io,
            o = e.properties.st;
          ($tr = $('<tr style="height: 25px;"></tr>').appendTo(l)),
            ($td = $(
              '<td style="font-weight: bold;">' +
                (e.properties.title.length > 20
                  ? e.properties.title.substring(0, 20) + "..."
                  : e.properties.title) +
                "</td>"
            ).appendTo($tr)),
            ($td = $(
              '<td style="white-space:nowrap;">' +
                e.properties.s +
                " " +
                r.UNIT_SPEED +
                "</td>"
            ).appendTo($tr)),
            "0" != t
              ? null != typeof o && null != o && o.indexOf("3005") >= 0
                ? ($td = $("<td></td>")
                    .attr("class", "engine_on")
                    .attr("title", r.JS_ENGINE_ON)
                    .appendTo($tr))
                : null != typeof o &&
                  null != o &&
                  o.indexOf("3006") >= 0 &&
                  null != e.properties.s &&
                  e.properties.s > 0
                ? ($td = $("<td></td>")
                    .attr("class", "engine_off")
                    .attr("title", r.JS_ENGINE_OFF)
                    .appendTo($tr))
                : ($td = $("<td></td>")
                    .attr("class", "parking")
                    .attr("title", r.JS_PARKING)
                    .appendTo($tr))
              : ($td = $("<td></td>").appendTo($tr)),
            ($td =
              "0" == t
                ? $("<td></td>")
                    .attr("class", "offline")
                    .attr("title", r.JS_TIP_OBJ_OFFLINE)
                    .appendTo($tr)
                : $("<td></td>")
                    .attr("class", "online")
                    .attr("title", r.JS_TIP_OBJ_ONLINE)
                    .appendTo($tr));
          var n = getIdValue("62:", i, !0);
          null != typeof n && null != n
            ? ($td =
                "0" == n
                  ? $("<td></td>")
                      .attr("class", "gpsvalid")
                      .attr("title", r.JS_GPS_VALID)
                      .appendTo($tr)
                  : $("<td></td>")
                      .attr("class", "cellvalid")
                      .attr("title", r.JS_LBS_VALID)
                      .appendTo($tr))
            : null != typeof o && o.indexOf("200E") >= 0
            ? ($td = $("<td></td>")
                .attr("class", "gpsvalid")
                .attr("title", r.JS_GPS_VALID)
                .appendTo($tr))
            : ($td = $("<td></td>")
                .attr("class", "invalid")
                .attr("title", r.JS_LOCATION_INVALID)
                .appendTo($tr));
        });
        L.popup({ offset: new L.Point(0, -10), minWidth: 250, maxHeight: 200 })
          .setLatLng(e.latlng)
          .setContent($popupTable.prop("outerHTML"))
          .openOn(W);
      }
    });
  (this.polylineDecoratorLayer = []), (this.anglePointsLayer = L.layerGroup());
  var j = this.anglePointsLayer;
  this.timePointsLayer = L.layerGroup();
  var Y = this.timePointsLayer;
  this.stopPointsLayer = L.layerGroup();
  var q = this.stopPointsLayer;
  this.eventPointsLayer = L.layerGroup();
  var X = this.eventPointsLayer;
  if (
    (W.addLayer(j),
    W.addLayer(Y),
    W.addLayer(q),
    W.addLayer(X),
    W.on("zoomstart", function () {
      this.currentZoom = W.getZoom();
    }),
    W.on("zoomend", function () {
      this.currentZoom > W.getZoom()
        ? K.StopAnimationMarker(!1, !0)
        : K.StopAnimationMarker(!1, !1),
        W.getZoom() < 16 ? W.removeLayer(j) : K.isShowAngles && W.addLayer(j),
        W.getZoom() < 12 ? W.removeLayer(Y) : K.isShowTimes && W.addLayer(Y),
        $("#maptools #ed_zone").click().click();
    }),
    W.on("exitFullscreen", function () {
      $("#geo, #maptools, #maptools_ext").css("display", "block"),
        1 == K.history && $("#playspeed").css("display", "block");
    }),
    W.on("enterFullscreen", function () {
      $("#geo, #maptools, #maptools_ext, #playspeed").css("display", "none"),
        1 == K.history && $("#playspeed").css("display", "none");
    }),
    W.on("moveend", function () {
      K.StopAnimationMarker(!1);
    }),
    W.on("popupopen", function (e) {
      console.log("popupopen");
      var t = e.popup._source;
      if (null != t && null != t.properties && null != t.properties.s) {
        var i = "sta_speedometer_" + t.properties.n;
        if (
          (createSpeedometer(i, t.properties.s),
          !(
            void 0 === t.properties ||
            void 0 === t.properties.ngeo ||
            0 == t.properties.ngeo ||
            (null != t.properties.anim && t.properties.anim)
          ))
        ) {
          var o = t.getPopup().getContent(),
            n = $(".infowindow .infobase ul .infoaddress");
          if (
            ($(o).find(".infobase ul .infoaddress").length > 0 &&
              (console.log("parse location"),
              K.GeoNames(t.properties.x, t.properties.y, n, "text", 0)),
            void 0 !== t.properties.jb && void 0 !== t.properties.n)
          ) {
            var r = a[t.properties.jb];
            if (r) {
              var s = r.img,
                l = r.name;
              $(".infowindow .infodriver ul #idrvdef_" + t.properties.n).html(
                s
              ),
                $(".infowindow .infodriver ul #ndrvdef" + t.properties.n).text(
                  l
                );
            }
          }
        }
      }
    }),
    W.addEventListener("baselayerchange", function () {
      $(".leaflet-control-layers").removeClass(
        "leaflet-control-layers-expanded"
      );
    }),
    W.addEventListener("overlayadd", function () {
      $(".leaflet-control-layers").removeClass(
        "leaflet-control-layers-expanded"
      );
    }),
    W.addEventListener("overlayremove", function () {
      $(".leaflet-control-layers").removeClass(
        "leaflet-control-layers-expanded"
      );
    }),
    1 == i)
  ) {
    var Q,
      ee = $('<div id="mapsearchbar" />').appendTo(e);
    $('<input type="text" id="mapsearchtext" />')
      .appendTo(ee)
      .keyup(function (e) {
        if ("13" == e.keyCode) {
          null != Q && null != W && W.removeLayer(Q);
          var t = $("#mapsearchtext").val();
          if ("" != t)
            L.Control.Geocoder.nominatim().geocode(t, function (e) {
              if (
                "undefined" != e &&
                e.length > 0 &&
                "undefined" != e[0].center
              ) {
                var t = e[0].center.lat,
                  i = e[0].center.lng;
                (Q = L.marker([t, i])
                  .bindPopup(t + "," + i, { offset: new L.Point(0, -10) })
                  .openPopup()
                  .bindTooltip(e[0].name, {
                    permanent: !0,
                    offset: L.point(0, -42),
                    direction: "center",
                  })
                  .addTo(W)),
                  W.setView(Q.getLatLng(), 18);
              } else alert("not found");
            });
        }
      });
  }
  var te = {
    points: [],
    color: "#3388FF",
    layers: L.layerGroup(),
    polygon: null,
    init: function () {
      te.destory(), (te.points = []), (te.polygon = null), te.layers.addTo(W);
    },
    close: function () {
      var e = rectangleMeasure.tips.getLabel(),
        t = document.createTextNode(rectangleMeasure.tips.getLabel()._content);
      (e._container.innerHTML = ""), e._container.appendChild(t);
      var i = document.createElement("span");
      (i.innerHTML = "【关闭】"),
        (i.style.color = "#00ff40"),
        e._container.appendChild(i),
        L.DomEvent.addListener(i, "click", function () {
          rectangleMeasure.destory();
        });
    },
    click: function (e) {
      W.doubleClickZoom.disable(),
        te.points.push(e.latlng),
        W.on("mousemove", te.mousemove);
    },
    mousemove: function (e) {
      te.points.push(e.latlng),
        te.polygon && te.layers.removeLayer(te.polygon),
        (te.polygon = L.polygon(te.points, {
          showMeasurements: !0,
          color: "#3388FF",
        })),
        te.polygon.addTo(te.layers),
        te.points.pop();
    },
    dblclick: function (e) {
      te.polygon &&
        (te.polygon.addTo(te.layers),
        te.polygon.enableEdit(),
        W.on(
          "editable:vertex:drag editable:vertex:deleted",
          te.polygon.updateMeasurements,
          te.polygon
        )),
        W.off("click", te.click)
          .off("mousemove", te.mousemove)
          .off("dblclick", te.dblclick);
    },
    destory: function () {
      te.layers && te.polygon && te.layers.removeLayer(te.polygon),
        W.removeLayer(te.layers);
    },
  };
  this.areaMeasure = te;
  var ie = L.control
    .measure({
      keyboard: !1,
      activeKeyCode: "M".charCodeAt(0),
      cancelKeyCode: 27,
      lineColor: "#3388FF",
      lineWeight: 3,
      lineDashArray: "6, 6",
      lineOpacity: 1,
      formatDistance: function (e) {
        return 1 == JS_UNIT_DISTANCE
          ? Math.round((1e3 * e) / 1609.344) / 1e3 + "mile"
          : e < 1e3
          ? Math.round(e) + "m"
          : Math.round((e / 1e3) * 100) / 100 + "km";
      },
    })
    .addTo(W);
  this.distMeasure = ie;
}
MapClassImpl.prototype = {
  SetHistoryMode: function (e) {
    this.history = e;
  },
  getDirPoint: function (e) {
    switch (Math.round(e / 45)) {
      case 1:
        return { x: 30, y: 0 };
      case 2:
        return { x: 30, y: 15 };
      case 3:
        return { x: 30, y: 30 };
      case 4:
        return { x: 15, y: 30 };
      case 5:
        return { x: 0, y: 30 };
      case 6:
        return { x: 0, y: 15 };
      case 7:
        return { x: 0, y: 0 };
      default:
        return { x: 15, y: 0 };
    }
  },
  getDirPath: function (e) {
    switch (Math.round(e / 45)) {
      case 1:
        return "../img/locate/d1.png";
      case 2:
        return "../img/locate/d2.png";
      case 3:
        return "../img/locate/d3.png";
      case 4:
        return "../img/locate/d4.png";
      case 5:
        return "../img/locate/d5.png";
      case 6:
        return "../img/locate/d6.png";
      case 7:
        return "../img/locate/d7.png";
      default:
        return "../img/locate/d0.png";
    }
  },
  ActiveMeasureTool: function (e) {
    e
      ? (this.areaMeasure.init(),
        this.wndMap
          .on("click", this.areaMeasure.click)
          .on("dblclick", this.areaMeasure.dblclick))
      : this.areaMeasure.destory();
  },
  ActiveTaskPathTool: function (e, t, i) {
    if (e) {
      var o = [L.latLng(t[0][0], t[0][1]), L.latLng(t[1][0], t[1][1])],
        n = L.Control.Geocoder.nominatim();
      (this.taskPath = L.Routing.control({
        waypoints: o,
        routeWhileDragging: !1,
        attributionControl: !0,
        addWaypoints: !1,
        collapsible: !0,
        geocoder: n,
        show: !1,
        units: 1 == JS_UNIT_DISTANCE ? "imperial" : "metric",
        plan: L.Routing.plan(o, {
          createMarker: function (e, t) {
            if (o[0])
              return L.marker(t.latLng, { draggable: !1 }).bindTooltip(i[e], {
                permanent: !0,
                offset: L.point(0, 0),
                direction: "bottom",
              });
          },
        }),
      }).addTo(this.wndMap)),
        this.taskPath.show();
    } else
      null != this.taskPath &&
        void 0 !== this.taskPath &&
        (this.taskPath.spliceWaypoints(0, 2), this.taskPath.hide());
  },
  ActiveRulerTool: function (e) {
    e ? this.distMeasure._startMeasuring() : this.distMeasure._stopMeasuring();
  },
  Free: function () {
    (this.trackpts = null), (this.wndMap = null);
  },
  Center: function (e, t, i) {
    this.wndMap.panTo(new L.LatLng(e, t)), 0 != i && this.wndMap.setZoom(i);
  },
  Zoom: function (e) {
    0 != e && this.wndMap.setZoom(e);
  },
  GetMap: function () {
    return this.wndMap;
  },
  ClosePopup: function () {
    this.wndMap.closePopup();
  },
  GeoNames: function (x, y, element, style, geocoders, isAsync) {
    try {
      $.ajaxSettings.async = !(null != isAsync && !isAsync);
      var self = this;
      $.get(
        "../address.ajax.php",
        { lat: y / 1e6, lng: x / 1e6 },
        function (data) {
          try {
            if ("." != data) {
              var result = eval("(" + data + ")");
              if (null != result.addr && void 0 !== result.addr) {
                element.removeClass("query_waiting");
                var ret = result.addr;
                try {
                  "text" == style
                    ? element.text(ret)
                    : "val" == style
                    ? element.val(ret)
                    : "html" == style
                    ? element.html(ret)
                    : "link" == style &&
                      element.html(
                        "<a target='_blank' href=" +
                          JS_GOOGLE_MAP_BASE_LINK +
                          "/maps?hl=en&q=" +
                          y / 1e6 +
                          "," +
                          x / 1e6 +
                          ">" +
                          ret +
                          " </a>"
                      );
                } catch (e) {}
              }
            } else if (void 0 === geocoders) {
              var url =
                "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?location=" +
                x / 1e6 +
                "," +
                y / 1e6 +
                "&f=pjson";
              $.get(url, function (data) {
                if (null != data && void 0 !== data) {
                  var result = eval("(" + data + ")");
                  if (null != result.address && void 0 !== result.address) {
                    element.removeClass("query_waiting");
                    var ret = result.address.LongLabel;
                    try {
                      "text" == style
                        ? element.text(ret)
                        : "val" == style
                        ? element.val(ret)
                        : "html" == style
                        ? element.html(ret)
                        : "link" == style &&
                          element.html(
                            "<a target='_blank' href=" +
                              JS_GOOGLE_MAP_BASE_LINK +
                              "/maps?hl=en&q=" +
                              y / 1e6 +
                              "," +
                              x / 1e6 +
                              ">" +
                              ret +
                              " </a>"
                          ),
                        self.SaveGeoName(y / 1e6, x / 1e6, ret);
                    } catch (e) {}
                  }
                }
              });
            } else {
              var geocoder = null;
              if (geocoders > 2) return;
              switch (geocoders) {
                case 0:
                  geocoder = L.Control.Geocoder.nominatim();
                  break;
                case 1:
                  geocoder = L.Control.Geocoder.arcgis();
                  break;
                case 2:
                  geocoder = L.Control.Geocoder.mapzen("search-DopSHJw");
              }
              var latlng = L.latLng(y / 1e6, x / 1e6);
              geocoder.reverse(
                latlng,
                self.wndMap.options.crs.scale(20),
                function (e) {
                  var t = e[0];
                  if (t) {
                    element.removeClass("query_waiting");
                    var i = t.name;
                    try {
                      "text" == style
                        ? element.text(i)
                        : "val" == style
                        ? element.val(i)
                        : "html" == style
                        ? element.html(i)
                        : "link" == style &&
                          element.html(
                            "<a target='_blank' href=" +
                              JS_GOOGLE_MAP_BASE_LINK +
                              "/maps?hl=en&q=" +
                              y / 1e6 +
                              "," +
                              x / 1e6 +
                              ">" +
                              i +
                              " </a>"
                          ),
                        self.SaveGeoName(y / 1e6, x / 1e6, i);
                    } catch (e) {
                      self.GeoNames(geocoders + 1);
                    }
                  }
                }
              );
            }
          } catch (e) {}
        }
      );
    } catch (e) {}
  },
  SaveGeoName: function (lat, lng, addr) {
    $.get(
      "../address.ajax.php",
      { lat: lat, lng: lng, addr: addr },
      function (data) {
        if ("." == data) console.log("save address fail");
        else {
          var result = eval("(" + data + ")");
          null != result.status &&
            void 0 !== result.status &&
            "ok" == result.status &&
            console.log("save address successful");
        }
      }
    );
  },
  MoveTop: function (e) {
    null != this.lastMarker && this.lastMarker.setZIndexOffset(0),
      (this.lastMarker = e),
      e.setZIndexOffset(1e3);
  },
  NewMarker: function (
    e,
    t,
    i,
    o,
    n,
    a,
    r,
    s,
    l,
    p,
    d,
    h,
    g,
    c,
    u,
    m,
    v,
    y,
    f,
    w
  ) {
    var T = window.parent,
      k = 0,
      M = L.latLng(a / 1e6, n / 1e6),
      b = "../img/arrow-offline.svg";
    1 == s
      ? ((b = "../img/arrow-online.svg"), (k = 1))
      : s > 1 && s < 7
      ? ((b = "../img/arrow-green.svg"), (k = 2))
      : 7 == s
      ? ((b = "../img/arrow-red.svg"), (k = 7))
      : 8 == s
      ? ((b = "../img/arrow-black.svg"), (k = 50))
      : 9 == s
      ? ((b = "../img/arrow-blue.svg"), (k = 50))
      : 10 == s
      ? ((b = "../img/arrow-green.svg"), (k = 50))
      : 11 == s
      ? ((b = "../img/arrow-gray.svg"), (k = 50))
      : 12 == s
      ? ((b = "../img/arrow-orange.svg"), (k = 50))
      : 13 == s
      ? ((b = "../img/arrow-purple.svg"), (k = 50))
      : 14 == s
      ? ((b = "../img/arrow-red.svg"), (k = 50))
      : 15 == s
      ? ((b = "../img/arrow-yellow.svg"), (k = 50))
      : 30 == s && ((b = "../img/arrow-idle.svg"), (k = 30)),
      (0 != s && 1 != s && 30 != s) || (l = 0);
    var x = L.icon({ iconUrl: b, iconSize: [28, 28], iconAnchor: [14, 14] }),
      S = "../img/icons/icon_" + r + ".svg",
      _ = getIdValue("F6:", v, !0),
      F = getIdValue("F7:", v, !0),
      A = "";
    if (null != _ && null != F) {
      var P =
        mileageUnitConversion(10 * parseFloat(_), T.JS_UNIT_DISTANCE) *
        (parseFloat(F) / 100);
      P > parseFloat(_) && (P = _),
        null != P &&
          (A =
            " | " +
            parseFloat(P).toFixed(0) +
            " " +
            T.UNIT_DIST +
            " | " +
            F +
            "%");
    }
    var C =
        '<ul><li style="background: url(' +
        S +
        ') no-repeat 0px center; padding-left: 22px; background-size : 18px 18px;">' +
        t +
        " (" +
        g +
        " " +
        T.UNIT_SPEED +
        A +
        ")</li>" +
        (this.isShowDriver
          ? '<li class="popup_driver">' + (null == w ? "" : w) + "</li>"
          : '<li style="display: none;" class="popup_driver">' +
            (null == w ? "" : w) +
            "</li>") +
        "</ul>",
      $ = L.marker(M, { icon: x, rotationAngle: l, draggable: !1 }).bindPopup(
        p,
        { offset: new L.Point(0, -10), minWidth: 320 }
      );
    this.isShowLabels ? $.openTooltip() : $.closeTooltip(),
      ($.properties = {
        n: e,
        position: M,
        map: this.wndMap,
        tip: this.wndTip,
        clickable: !0,
        title: t,
        nc: i,
        si: o,
        content: p,
        x: n,
        y: a,
        ico: r,
        sta: s,
        dir: l,
        s: g,
        t: c,
        ts: u,
        ngeo: !1,
        tt: C,
        st: m,
        io: v,
        dt: y,
        jb: f,
        dn: w,
        mt: k,
      });
    var E = this;
    return (
      $.on("mousedown", function (e) {
        (this.properties.ngeo = !0), E.MoveTop($), console.log("mousedown");
      }),
      void 0 !== d &&
        1 == d &&
        (this.wndMap.getBounds().contains($.getLatLng()) ||
          this.wndMap.panTo($.getLatLng())),
      this.MoveTop($),
      $
    );
  },
  UpdateMarker: function (
    e,
    t,
    i,
    o,
    n,
    a,
    r,
    s,
    l,
    p,
    d,
    h,
    g,
    c,
    u,
    m,
    v,
    y,
    f,
    w
  ) {
    var T = window.parent,
      k = 0;
    (e.properties.ngeo = !1), (e.properties.sta = s);
    var M = "../img/arrow-offline.svg";
    1 == s
      ? ((M = "../img/arrow-online.svg"), (k = 1))
      : s > 1 && s < 7
      ? ((M = "../img/arrow-green.svg"), (k = 2))
      : 7 == s
      ? ((M = "../img/arrow-red.svg"), (k = 7))
      : 8 == s
      ? ((M = "../img/arrow-black.svg"), (k = 50))
      : 9 == s
      ? ((M = "../img/arrow-blue.svg"), (k = 50))
      : 10 == s
      ? ((M = "../img/arrow-green.svg"), (k = 50))
      : 11 == s
      ? ((M = "../img/arrow-gray.svg"), (k = 50))
      : 12 == s
      ? ((M = "../img/arrow-orange.svg"), (k = 50))
      : 13 == s
      ? ((M = "../img/arrow-purple.svg"), (k = 50))
      : 14 == s
      ? ((M = "../img/arrow-red.svg"), (k = 50))
      : 15 == s
      ? ((M = "../img/arrow-yellow.svg"), (k = 50))
      : 30 == s && ((M = "../img/arrow-idle.svg"), (k = 30));
    var b = L.icon({ iconUrl: M, iconSize: [28, 28], iconAnchor: [14, 14] });
    if (
      ((0 != s && 1 != s && 30 != s) || (l = 0),
      e.properties.s != h ||
        e.properties.title != t ||
        e.properties.ico != r ||
        getIdValue("F6:", m, !0))
    ) {
      (e.properties.title = t), (e.properties.s = h), (e.properties.ico = r);
      var x = "../img/icons/icon_" + r + ".svg",
        S = getIdValue("F6:", m, !0),
        _ = getIdValue("F7:", m, !0),
        F = "";
      if (null != S && null != _) {
        var A =
          mileageUnitConversion(10 * parseFloat(S), T.JS_UNIT_DISTANCE) *
          (parseFloat(_) / 100);
        A > parseFloat(S) && (A = S),
          null != A &&
            (F =
              " | " +
              parseFloat(A).toFixed(0) +
              " " +
              T.UNIT_DIST +
              " | " +
              _ +
              "%");
      }
      var P =
        '<ul><li style="background: url(' +
        x +
        ') no-repeat 0px center; padding-left: 22px; background-size : 18px 18px;">' +
        t +
        " (" +
        h +
        " " +
        T.UNIT_SPEED +
        F +
        ")</li>" +
        (this.isShowDriver
          ? '<li class="popup_driver">' + (null == f ? "" : f) + "</li>"
          : '<li style="display: none;" class="popup_driver">' +
            (null == f ? "" : f) +
            "</li>") +
        "</ul>";
      e.setTooltipContent(P), (e.properties.tt = P);
    }
    var C = { latitude: e.properties.y / 1e6, longitude: e.properties.x / 1e6 },
      $ = bearing(C, { latitude: a / 1e6, longitude: n / 1e6 });
    if (($ < 0 && ($ += 360), e.properties.x != n || e.properties.y != a)) {
      var E = L.latLng(a / 1e6, n / 1e6),
        D = L.latLng(e.properties.y / 1e6, e.properties.x / 1e6),
        I = this.markerCluster.getVisibleParent(e);
      if (
        this.wndMap.getBounds().contains(E) &&
        this.wndMap.getBounds().contains(D) &&
        I &&
        "_popup" in I
      ) {
        this.animationMarker[t] = e;
        var G = e.isPopupOpen();
        (e.properties.anim = !0), e.closePopup();
        var N = !1;
        0 != s && 1 != s && 30 != s && (e.setIcon(b), (N = !0));
        var R = this;
        e.setEnd(function () {
          var i = [];
          i.push(e),
            R.ToggleDriver(i, R.isShowDriver),
            e.setRotationAngle(l),
            (e.properties.ngeo = !0),
            (e.properties.anim = !1),
            R.MoveTop(e),
            delete R.animationMarker[t],
            G && (e.closePopup(), e.openPopup()),
            N || e.setIcon(b);
        }),
          e.slideTo(E, { duration: w || 0, rotationAngle: $ });
      } else {
        e.setRotationAngle(l), e.setLatLng(E), e.setIcon(b), this.MoveTop(e);
        var O = [];
        O.push(e), this.ToggleDriver(O, this.isShowDriver);
      }
      (e.properties.x = n), (e.properties.y = a);
    } else e.setIcon(b), e.setRotationAngle(l);
    e.properties.dir != l && (e.properties.dir = l),
      e.properties.t != g && (e.properties.t = g),
      e.properties.ts != c && (e.properties.ts = c),
      e.properties.st != u && (e.properties.st = u),
      e.properties.io != m && (e.properties.io = m),
      e.properties.dt != v && (e.properties.dt = v),
      e.properties.jb != y && (e.properties.jb = y),
      e.properties.dn != f && (e.properties.dn = f),
      e.properties.nc != i && (e.properties.nc = i),
      e.properties.si != o && (e.properties.si = o),
      e.properties.mt != k && (e.properties.mt = k),
      e.properties.content != p &&
        ((e.properties.content = p),
        e.getPopup().setContent(p),
        e.isPopupOpen() && (e.closePopup(), e.openPopup())),
      void 0 !== d &&
        1 == d &&
        (this.MoveTop(e),
        this.wndMap.getBounds().contains(e.getLatLng()) ||
          this.wndMap.panTo(e.getLatLng())),
      this.isShowLabels ? e.openTooltip() : e.closeTooltip();
  },
  StopAnimationMarker: function (e, t) {
    for (var i in this.animationMarker)
      if (null != this.animationMarker[i])
        if (e) {
          var o = this.markerCluster.getVisibleParent(this.animationMarker[i]);
          if (o && "_popup" in o) continue;
          var n = L.latLng(
            this.animationMarker[i].properties.y / 1e6,
            this.animationMarker[i].properties.x / 1e6
          );
          this.animationMarker[i].setLatLng(n),
            this.animationMarker[i].setRotationAngle(
              this.animationMarker[i].properties.dir
            ),
            this.MoveTop(this.animationMarker[i]),
            (a = []).push(this.animationMarker[i]),
            this.ToggleDriver(a, this.isShowDriver),
            delete this.animationMarker[i];
        } else {
          var a;
          n = L.latLng(
            this.animationMarker[i].properties.y / 1e6,
            this.animationMarker[i].properties.x / 1e6
          );
          if (!this.wndMap.getBounds().contains(n) || t)
            this.animationMarker[i].setLatLng(n),
              this.animationMarker[i].setRotationAngle(
                this.animationMarker[i].properties.dir
              ),
              this.MoveTop(this.animationMarker[i]),
              (a = []).push(this.animationMarker[i]),
              this.ToggleDriver(a, this.isShowDriver),
              delete this.animationMarker[i];
        }
  },
  AddLine: function (e, t, i, o, n, a, r, s) {
    if (e != i || t != o) {
      var l,
        p = [];
      return (
        (p[0] = new L.LatLng(t / 1e6, e / 1e6)),
        (p[1] = new L.LatLng(o / 1e6, i / 1e6)),
        null == s
          ? (l = new L.polyline(p, {
              color: n || this.opts_poly.strokeColor,
              opacity: r || this.opts_poly.strokeOpacity,
              weight: a || this.opts_poly.strokeWeight,
              smoothFactor: 1,
            }))
          : (this.wndMap.getZoom() > 14 ? (s -= 50) : (s -= 250),
            (l = L.motion
              .polyline(
                p,
                {
                  color: n || this.opts_poly.strokeColor,
                  opacity: r || this.opts_poly.strokeOpacity,
                  weight: a || this.opts_poly.strokeWeight,
                  smoothFactor: 1,
                },
                { auto: !0, easing: L.Motion.Ease.linear }
              )
              .motionDuration(
                s &&
                  this.wndMap.getBounds().contains(p[0]) &&
                  this.wndMap.getBounds().contains(p[1])
                  ? s
                  : 0
              )).addTo(this.wndMap)),
        l
      );
    }
    return null;
  },
  AddPoint: function (e, t, i, o, n, a, r, s, l, p, d, h, g) {
    if (
      0 == o ||
      0 == n ||
      (1 != l && 2 != l && 3 != l && 6 != l && e == o && t == n)
    )
      return null;
    var c,
      u = 0,
      m =
        1 == l || 3 == l || 6 == l
          ? new L.LatLng(t / 1e6, e / 1e6)
          : new L.LatLng(n / 1e6, o / 1e6),
      v = "";
    switch (l) {
      case 1:
        (c = L.icon({
          iconUrl: "../img/route-start.svg",
          iconSize: [28, 28],
          iconAnchor: [14, 28],
        })),
          (u = 7),
          (v += "<div class='infowindow'><ul>"),
          (v += "<h3>" + JS_START_POINT + "</h3>");
        var y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
        break;
      case 2:
        (c = L.icon({
          iconUrl: "../img/route-end.svg",
          iconSize: [28, 28],
          iconAnchor: [14, 28],
        })),
          (u = 8),
          (v += "<div class='infowindow'><ul>"),
          (v += "<h3>" + JS_END_POINT + "</h3>");
        y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
        break;
      case 3:
        (c = L.icon({
          iconUrl: "../img/route-stop.svg",
          iconSize: [28, 28],
          iconAnchor: [14, 28],
        })),
          (u = 4),
          (v += "<div class='infowindow'>"),
          (v += "<h3>" + JS_STOP + "</h3>"),
          (v += "<table>"),
          (v +=
            "<tr><td>" +
            JS_START +
            "</td><td style='padding-left:10px;'>" +
            p +
            "</td></tr>"),
          (v +=
            "<tr><td>" +
            JS_END +
            "</td><td style='padding-left:10px;'>" +
            d +
            "</td></tr>"),
          (v +=
            "<tr><td>" +
            JS_DURATION +
            "</td><td style='padding-left:10px;'>" +
            h +
            "</td></tr>"),
          (v += "</table></div>");
        break;
      case 4:
        (c = L.icon({
          iconUrl: "../img/waypoint_icon1.png",
          iconSize: [10, 10],
          iconAnchor: [5, 5],
        })),
          (u = 2),
          (v += "<div class='infowindow'><ul>");
        y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
        break;
      case 5:
        (c = L.icon({
          iconUrl: "../img/waypoint_icon1.png",
          iconSize: [10, 10],
          iconAnchor: [5, 5],
        })),
          (u = 6),
          (v += "<div class='infowindow'><ul>");
        y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
        break;
      case 6:
        (c = L.icon({
          iconUrl: "../img/route-event.svg",
          iconSize: [28, 28],
          iconAnchor: [14, 28],
        })),
          (u = 5),
          (v += "<div class='infowindow'>"),
          (v += "<h3>" + g + "</h3><ul>");
        y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
        break;
      case 7:
        (c = L.icon({
          iconUrl: "../img/arrow-angle.svg",
          iconSize: [16, 16],
          iconAnchor: [8, 8],
        })),
          (u = 3),
          (v += "<div class='infowindow'><ul>");
        y = getSpeedState(1, 1, a, r, 0);
        (v +=
          a > 0
            ? "<li class='infospeed' style='padding-left: 18px; background: url(../img/move.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"
            : "<li class='infospeed' style='padding-left: 18px; background: url(../img/parking.svg) no-repeat 0px; background-size : 18px 18px;'> <span>&nbsp;&nbsp;" +
              y.spd +
              "</span></li>"),
          (v +=
            "<li class='infoltime'> <span>&nbsp;&nbsp;" +
            r +
            "</span></li><li class='infolocal'> <span>&nbsp;&nbsp;" +
            n / 1e6 +
            " &#176;," +
            o / 1e6 +
            " &#176;</span></li>"),
          (v += "</ul></div>");
    }
    var f = L.marker(m, {
        icon: c,
        rotationAngle: 1 == u || 3 == u ? s : 0,
        draggable: !1,
      }).bindPopup(v, {
        offset: new L.Point(
          0,
          0 == u || 4 == u || 5 == u || 7 == u || 8 == u ? -25 : -5
        ),
      }),
      w = this;
    return (
      f.on("click", function (e) {
        w.MoveTop(f);
      }),
      void 0 !== u &&
        null != u &&
        (0 == u || 3 == u || 6 == u || 7 == u || 8 == u
          ? (f.addTo(this.wndMap),
            3 == u
              ? this.averagePoints.push(f)
              : 7 == u
              ? (this.startMarker = f)
              : 8 == u && (this.endMarker = f))
          : 1 == u
          ? (this.anglePoints.push(f), this.anglePointsLayer.addLayer(f))
          : 2 == u
          ? (this.timePoints.push(f), this.timePointsLayer.addLayer(f))
          : 4 == u
          ? (this.stopPoints.push(f), this.stopPointsLayer.addLayer(f))
          : 5 == u &&
            (this.eventPoints.push(f), this.eventPointsLayer.addLayer(f))),
      f
    );
  },
  AddTrackPoint: function (e, t, i, o, n, a, r, s) {
    var l = this.trackpts[e];
    if (void 0 !== l && null != l) {
      if (l.x != t || l.y != i) {
        var p,
          d,
          h,
          g,
          c = getSpeedColor(o),
          u = null;
        if (
          (null != r && void 0 !== r
            ? ((d = r.weight), (h = r.opacity), (g = r.point))
            : ((d = this.opts_poly.strokeWeight),
              (h = this.opts_poly.strokeOpacity),
              (g = this.opts_poly.point)),
          (p = this.AddLine(l.x, l.y, t, i, c, d, h, s)),
          g &&
            ((u = this.AddPoint(
              l.x,
              l.y,
              l.d,
              t,
              i,
              o,
              n,
              a,
              5
            )).setZIndexOffset(0),
            null != s && s > 0))
        ) {
          this.wndMap.removeLayer(u);
          var m = this;
          setTimeout(function () {
            for (var t = !1, i = 0; i < l.info.length; i++)
              l.info[i].point == u && (t = !0);
            m.trackpts[e] && t ? m.wndMap.addLayer(u) : m.wndMap.removeLayer(p);
          }, s - 200);
        }
        if (
          ((l.x = t),
          (l.y = i),
          (l.d = a),
          (null != p || null != u) &&
            (l.info.push({ line: p, point: u }),
            l.info.length > this.def_save_points))
        ) {
          var v = l.info.shift();
          void 0 !== v.line &&
            null != v.line &&
            (this.wndMap.removeLayer(v.line), (v.line = null)),
            void 0 !== v.point &&
              null != v.point &&
              (this.wndMap.removeLayer(v.point), (v.point = null)),
            (v = null);
        }
      }
    } else l = { x: t, y: i, d: a, info: [] };
    delete this.trackpts[e], (this.trackpts[e] = l);
  },
  DrawTrackLine: function (e, t, i, o, n, a, r, s, l, p, d) {
    (this.isShowStops = n),
      (this.isShowEvents = r),
      (this.isShowAngles = s),
      (this.isShowTimes = l),
      this.RemoveTrack(e);
    var h,
      g,
      c,
      u,
      m = { x: 0, y: 0, info: [] };
    void 0 !== i
      ? ((h = void 0 !== i.weight ? i.weight : this.opts_poly.strokeWeight),
        (g = void 0 !== i.opacity ? i.opacity : this.opts_poly.strokeOpacity),
        (c = void 0 !== i.point && i.point))
      : ((h = this.opts_poly.strokeWeight),
        (g = this.opts_poly.strokeOpacity),
        (c = !1));
    try {
      var v = null,
        y = null,
        f = [];
      if (null != p && void 0 !== p.length && p.length > 0) {
        for (var w = 0; w < p.length; w++)
          (this.tracklatLngs[p[w].GPS_TIME_START] = new L.latLng(
            p[w].LAT_START,
            p[w].LNG_START
          )),
            (this.tracklatLngs[p[w].GPS_TIME_END] = new L.latLng(
              p[w].LAT_END,
              p[w].LNG_END
            ));
        (y = p.shift()),
          (v =
            newDate(y.GPS_TIME_START).getTime() +
            (newDate(y.GPS_TIME_END).getTime() -
              newDate(y.GPS_TIME_START).getTime()) /
              2);
      }
      for (var T = [], k = 1; k < t.length; k++) {
        u = getSpeedColor(t[k].s);
        var M,
          b = null;
        if (
          ((M = this.AddLine(
            t[k - 1].x,
            t[k - 1].y,
            t[k].x,
            t[k].y,
            u,
            h,
            g,
            d
          )),
          T.push([t[k - 1].y / 1e6, t[k - 1].x / 1e6]),
          c)
        ) {
          var x = $.format.date(t[k].tg, JS_DEFAULT_DATETIME_fmt_JS);
          if (1 == k) {
            var S = $.format.date(t[k - 1].tg, JS_DEFAULT_DATETIME_fmt_JS);
            (b = this.AddPoint(
              t[k - 1].x,
              t[k - 1].y,
              t[k - 1].d,
              t[k].x,
              t[k].y,
              t[k].s,
              S,
              t[k].d,
              1
            )),
              m.info.push({ line: null, point: b }),
              ((null != b && null == p) || void 0 === p.length) &&
                (this.tracklatLngs[t[k].tg] = b.getLatLng()),
              2 == t.length &&
                ((b = this.AddPoint(
                  t[k].x,
                  t[k].y,
                  t[k].d,
                  t[k].x,
                  t[k].y,
                  t[k].s,
                  x,
                  t[k].d,
                  2
                )),
                m.info.push({ line: null, point: b }),
                ((null != b && null == p) || void 0 === p.length) &&
                  (this.tracklatLngs[t[k].tg] = b.getLatLng()));
          } else
            k == t.length - 1 &&
              ((b = this.AddPoint(
                t[k - 1].x,
                t[k - 1].y,
                t[k - 1].d,
                t[k].x,
                t[k].y,
                t[k].s,
                x,
                t[k].d,
                2
              )),
              m.info.push({ line: null, point: b }),
              ((null != b && null == p) || void 0 === p.length) &&
                (this.tracklatLngs[t[k].tg] = b.getLatLng()));
          null != v &&
            v >= newDate(t[k - 1].tg).getTime() &&
            v <= newDate(t[k].tg).getTime() &&
            ((this.tracklatLngs[t[k].tg] = new L.latLng(
              t[k].y / 1e6,
              t[k].x / 1e6
            )),
            (v =
              null != (y = p.shift()) && void 0 !== y
                ? newDate(y.GPS_TIME_START).getTime() +
                  (newDate(y.GPS_TIME_END).getTime() -
                    newDate(y.GPS_TIME_START).getTime()) /
                    2
                : null)),
            (b = this.AddPoint(
              t[k - 1].x,
              t[k - 1].y,
              t[k - 1].d,
              t[k].x,
              t[k].y,
              t[k].s,
              x,
              t[k].d,
              4
            ));
        }
        (m.x = t[k].x),
          (m.y = t[k].y),
          (m.d = t[k].d),
          null != M &&
            null != b &&
            (m.info.push({ line: M, point: b, time: t[k].tg, color: u }),
            f.push(b.getLatLng()));
      }
      if (
        ((this.polylineDecoratorLayer[e] = L.polylineDecorator(T, {
          patterns: [
            {
              offset: 0,
              repeat: 300,
              symbol: L.Symbol.arrowHead({
                pixelSize: 13,
                headAngle: 40,
                pathOptions: {
                  weight: 1,
                  fillOpacity: 1,
                  opacity: 1,
                  stroke: !0,
                  color: "white",
                  fill: !0,
                  fillColor: "#22B04B",
                  fillOpacity: 1,
                },
              }),
            },
          ],
        }).addTo(this.wndMap)),
        void 0 !== a && a.length > 0)
      )
        for (b = null, k = 0; k < a.length; k++) {
          x = $.format.date(a[k].t, JS_DEFAULT_DATETIME_fmt_JS);
          (b = this.AddPoint(
            a[k].x,
            a[k].y,
            a[k].d,
            a[k].x,
            a[k].y,
            a[k].s,
            x,
            a[k].d,
            6,
            "",
            "",
            "",
            a[k].e
          )),
            m.info.push({ line: null, point: b });
        }
      if (void 0 !== o && o.length > 0)
        for (b = null, k = 0; k < o.length; k++) {
          var _ = $.format.date(o[k].START_TIME, JS_DEFAULT_DATETIME_fmt_JS),
            F = $.format.date(o[k].END_TIME, JS_DEFAULT_DATETIME_fmt_JS),
            A = o[k].DURATION_SECOND;
          (b = this.AddPoint(
            o[k].LNG,
            o[k].LAT,
            0,
            o[k].LNG,
            o[k].LAT,
            0,
            F,
            0,
            3,
            _,
            F,
            second2time(A)
          )),
            m.info.push({ line: null, point: b });
        }
      (this.trackpts[e] = m),
        (this.opts_track = {
          point: i.trackPoint || !1,
          line: i.trackLine || !0,
        }),
        this.isShowStops || this.wndMap.removeLayer(this.stopPointsLayer),
        this.isShowEvents || this.wndMap.removeLayer(this.eventPointsLayer),
        this.isShowAngles ||
          (this.wndMap.removeLayer(this.anglePointsLayer),
          this.wndMap.removeLayer(this.polylineDecoratorLayer[e])),
        this.isShowTimes || this.wndMap.removeLayer(this.timePointsLayer),
        this.ShowHideTrackLine(e, this.isRoute),
        this.isSnap && this.ToggleSnapLayer(this.isSnap),
        f.length > 0 && this.wndMap.fitBounds(f);
    } catch (e) {}
  },
  LocateMarker: function (e, t, i, o, n) {
    if (
      (this.StopAnimationMarker(!1),
      (e.isPopupOpen() ||
        (void 0 !== i && 1 == i) ||
        (void 0 !== n && 1 == n)) &&
        (null != e.properties &&
          null != e.properties.ngeo &&
          void 0 !== e.properties.ngeo &&
          (e.properties.ngeo = !0),
        e.closePopup(),
        e.openPopup()),
      void 0 !== t &&
        1 == t &&
        ((o && this.wndMap.getBounds().contains(e.getLatLng()) && !i) ||
          this.wndMap.panTo(e.getLatLng())),
      void 0 !== i && 1 == i)
    ) {
      var a = [e.getLatLng()],
        r = L.latLngBounds(a);
      this.wndMap.fitBounds(r, {
        maxZoom: this.wndMap.getZoom() < 14 ? 14 : this.wndMap.getZoom(),
      });
    }
    this.MoveTop(e);
  },
  AddMarker: function (e) {
    void 0 !== e && this.markerCluster.addLayer(e);
  },
  RemoveMarker: function (e) {
    void 0 !== e &&
      (this.lastMarker == e && (this.lastMarker = null),
      this.wndMap.removeLayer(e),
      this.markerCluster.removeLayer(e));
  },
  RemoveTrack: function (e) {
    this.anglePointsLayer.clearLayers(),
      this.timePointsLayer.clearLayers(),
      this.stopPointsLayer.clearLayers(),
      this.eventPointsLayer.clearLayers();
    var t = this.trackpts[e];
    if (void 0 !== t) {
      for (var i = 0; i < t.info.length; i++) {
        var o = t.info[i];
        void 0 !== o.line &&
          null != o.line &&
          (this.wndMap.removeLayer(o.line), (o.line = null)),
          void 0 !== o.point &&
            null != o.point &&
            (this.wndMap.removeLayer(o.point), (o.point = null));
      }
      delete this.trackpts[e];
    }
    (this.anglePoints = []),
      (this.timePoints = []),
      (this.stopPoints = []),
      (this.eventPoints = []),
      (this.averagePoints = []),
      (this.tracklatLngs = []),
      null != this.routingSnapControl &&
        (this.wndMap.removeControl(this.routingSnapControl),
        (this.routingSnapControl = null)),
      null != this.routingSnapRoute &&
        (this.wndMap.removeLayer(this.routingSnapRoute),
        (this.routingSnapRoute = null)),
      null != this.polylineDecoratorLayer[e] &&
        (this.wndMap.removeLayer(this.polylineDecoratorLayer[e]),
        (this.polylineDecoratorLayer[e] = null));
  },
  ClearTrack: function (e) {
    if (void 0 !== e) this.RemoveTrack(e);
    else {
      for (var e in this.trackpts) this.RemoveTrack(e);
      this.trackpts = [];
    }
  },
  ClearMarker: function (e) {
    for (var t in ((this.lastMarker = null), e))
      this.markerCluster.removeLayer(e[t]), delete e[t];
  },
  MarkersFitBounds: function (e) {
    var t = [];
    for (var i in e) t.push(e[i].getLatLng());
    this.wndMap.fitBounds(t);
  },
  ShowHideMovesLine: function (e, t, i, o) {
    var n = this.trackpts[e];
    if (void 0 !== n) {
      for (var a = [], r = 0; r < n.info.length; r++) {
        var s = n.info[r];
        if (
          void 0 !== s.line &&
          null != s.line &&
          void 0 !== s.point &&
          null != s.point &&
          void 0 !== s.time &&
          null != s.time &&
          void 0 !== s.color &&
          null != s.color
        ) {
          var l = s.time,
            p = s.line,
            d = s.color,
            h = s.point;
          o && newDate(l) >= newDate(t) && newDate(l) <= newDate(i)
            ? (p.setStyle({
                weight: this.opts_poly.strokeMovesWeight,
                color: this.opts_poly.strokeMovesColor,
              }),
              p.bringToFront(),
              a.push(h.getLatLng()))
            : (p.setStyle({ weight: this.opts_poly.strokeWeight, color: d }),
              p.bringToBack());
        }
      }
      a.length > 0 && this.wndMap.fitBounds(a);
    }
  },
  ShowHideTrackLine: function (e, t) {
    this.isRoute = t;
    var i = this.trackpts[e];
    if (void 0 !== i)
      for (var o = 0; o < i.info.length; o++) {
        var n = i.info[o];
        if (
          void 0 !== n.line &&
          null != n.line &&
          void 0 !== n.point &&
          null != n.point &&
          void 0 !== n.time &&
          null != n.time &&
          void 0 !== n.color &&
          null != n.color
        ) {
          var a = n.line;
          t ? a.addTo(this.wndMap) : this.wndMap.removeLayer(a);
        }
      }
    this.ShowHideAveragePoint(!t);
  },
  ShowHideAveragePoint: function (e) {
    var t = this.averagePoints;
    if (void 0 !== t)
      for (var i = 0; i < t.length; i++)
        e ? this.wndMap.removeLayer(t[i]) : t[i].addTo(this.wndMap);
  },
  HideShowMarker: function (e, t) {
    if (t) {
      for (var i in e)
        this.isClusters
          ? (this.wndMap.removeLayer(e[i]),
            this.markerCluster.removeLayer(e[i]),
            this.markerCluster.addLayer(e[i]))
          : (this.wndMap.removeLayer(e[i]),
            this.markerCluster.removeLayer(e[i]),
            e[i].addTo(this.wndMap)),
          (this.showingMarkers[i] = e[i]);
      this.ToggleMarkerTooltip(e, this.isShowLabels);
    } else
      for (var i in e)
        e[i].unbindTooltip(),
          this.markerCluster.removeLayer(e[i]),
          this.wndMap.removeLayer(e[i]),
          this.ClearTrack(i),
          delete this.showingMarkers[i];
    this.isShowMarkers = t;
  },
  ClustersMarker: function (e) {
    if (((this.isClusters = e), e))
      for (var t in this.showingMarkers)
        this.showingMarkers[t].unbindTooltip(),
          this.wndMap.removeLayer(this.showingMarkers[t]),
          this.markerCluster.addLayer(this.showingMarkers[t]);
    else
      for (var t in this.showingMarkers)
        this.showingMarkers[t].unbindTooltip(),
          this.markerCluster.removeLayer(this.showingMarkers[t]),
          this.showingMarkers[t].addTo(this.wndMap);
    this.ToggleMarkerTooltip(this.showingMarkers, this.isShowLabels);
  },
  RefreshClusters: function () {
    this.markerCluster.refreshClusters();
  },
  ToggleMarkerTooltip: function (e, t) {
    if (t)
      for (var i in e)
        this.isShowDriver
          ? ($(e[i].properties.tt)
              .find(".popup_driver")
              .css("display", "block"),
            (e[i].properties.tt = $(e[i].properties.tt).get(0)))
          : ($(e[i].properties.tt).find(".popup_driver").css("display", "none"),
            (e[i].properties.tt = $(e[i].properties.tt).get(0))),
          e[i]
            .unbindTooltip()
            .bindTooltip(e[i].properties.tt, {
              permanent: !0,
              offset: L.point(18, 0),
              direction: "right",
            });
    else for (var i in e) e[i].unbindTooltip();
    this.isShowLabels = t;
  },
  ToggleStopLayer: function (e) {
    (this.isShowStops = e),
      e
        ? this.wndMap.addLayer(this.stopPointsLayer)
        : this.wndMap.removeLayer(this.stopPointsLayer);
  },
  ToggleEventLayer: function (e) {
    (this.isShowEvents = e),
      e
        ? this.wndMap.addLayer(this.eventPointsLayer)
        : this.wndMap.removeLayer(this.eventPointsLayer);
  },
  ToggleAngleLayer: function (e) {
    for (var t in ((this.isShowAngles = e),
    e && this.wndMap.getZoom() >= 16
      ? this.wndMap.addLayer(this.anglePointsLayer)
      : this.wndMap.removeLayer(this.anglePointsLayer),
    this.polylineDecoratorLayer))
      null != this.polylineDecoratorLayer[t] &&
        (e
          ? this.wndMap.addLayer(this.polylineDecoratorLayer[t])
          : this.wndMap.removeLayer(this.polylineDecoratorLayer[t]));
  },
  ToggleTimesLayer: function (e) {
    (this.isShowTimes = e),
      e && this.wndMap.getZoom() >= 12
        ? this.wndMap.addLayer(this.timePointsLayer)
        : this.wndMap.removeLayer(this.timePointsLayer);
  },
  ToggleDriver: function (e, t) {
    for (var i in ((this.isShowDriver = t), e))
      this.isShowDriver
        ? ($(e[i].properties.tt).find(".popup_driver").css("display", "block"),
          (e[i].properties.tt = $(e[i].properties.tt).get(0)))
        : ($(e[i].properties.tt).find(".popup_driver").css("display", "none"),
          (e[i].properties.tt = $(e[i].properties.tt).get(0))),
        this.isShowLabels &&
          e[i]
            .unbindTooltip()
            .bindTooltip(e[i].properties.tt, {
              permanent: !0,
              offset: L.point(18, 0),
              direction: "right",
            });
  },
  ResizeMapContainer: function () {
    this.wndMap.invalidateSize(!0);
  },
  GetEventMarker: function (e) {
    return this.eventPoints[e];
  },
  GetStopMarker: function (e) {
    return this.stopPoints[e];
  },
  GetStartMarker: function () {
    return this.startMarker;
  },
  GetEndMarker: function () {
    return this.endMarker;
  },
  ToggleSnapLayer: function (e) {
    if (this.isSnaping) return !1;
    if (((this.isSnap = e), e)) {
      if (null != this.routingSnapRoute)
        this.routingSnapRoute.addTo(this.wndMap);
      else if (Object.keys(this.tracklatLngs).length > 0)
        try {
          (this.isSnaping = !0),
            (this.routingSnapControl = L.Routing.control({
              router: this.router,
              waypoints: unique(sortKey2Value(this.tracklatLngs)),
              show: !1,
              routeWhileDragging: !1,
              waypointMode: "snap",
              createMarker: function () {},
            }).addTo(this.wndMap));
          var t = this;
          this.routingSnapControl.on("routeselected", function (e) {
            (t.isSnaping = !1),
              (t.routingSnapRoute = L.polyline(e.route.coordinates, {
                color: "yellow",
              }).addTo(t.wndMap)),
              t.wndMap.removeControl(t.routingSnapControl);
          });
        } catch (e) {
          this.isSnaping = !1;
        }
    } else
      null != this.routingSnapRoute &&
        this.wndMap.removeLayer(this.routingSnapRoute);
    return !0;
  },
  DisplayMyLocation: function (e, t) {
    if (this.myLocationMarker) this.myLocationMarker.setLatLng([e.lat, e.lng]);
    else {
      var i = L.icon({
        iconUrl: "mimg/location.svg",
        iconSize: [28, 28],
        iconAnchor: [14, 14],
      });
      this.myLocationMarker = L.marker([e.lat, e.lng], { icon: i })
        .bindPopup(e.lat + "," + e.lng, { offset: new L.Point(0, -10) })
        .openPopup()
        .bindTooltip(JS_MYLOCATION, {
          permanent: !0,
          offset: L.point(0, -30),
          direction: "center",
        })
        .addTo(this.wndMap);
    }
    t && this.wndMap.panTo(this.myLocationMarker.getLatLng());
  },
  HideMyLocation: function () {
    null != this.myLocationMarker &&
      this.wndMap.removeLayer(this.myLocationMarker),
      (this.myLocationMarker = null);
  },
};
