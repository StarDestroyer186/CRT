var alarmtimer,
  alarmtimer2,
  mgrshare_position_array_name = [],
  race_array = [];
function getSpeedState(t, e, a, i, o, n, r) {
  var s = window.parent,
    l = {
      tip: "",
      sta: 0,
      spd: a + " " + s.UNIT_SPEED + " (" + s.JS_STATIC + ")",
      val: a,
    };
  if (1 == t) {
    if (((l.sta = 1), 1 == e))
      if (a >= 120)
        (l.tip = a + "" + s.UNIT_SPEED),
          (l.sta = 6),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_OVER_SPEED + ")");
      else if (a >= 90)
        (l.tip = a + "" + s.UNIT_SPEED),
          (l.sta = 5),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_HIGH_SPEED + ")");
      else if (a >= 80)
        (l.tip = a + " " + s.UNIT_SPEED),
          (l.sta = 4),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_HIGH_SPEED + ")");
      else if (a > 40)
        (l.tip = a + " " + s.UNIT_SPEED),
          (l.sta = 3),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_MOVING + ")");
      else if (a > 0)
        (l.tip = a + " " + s.UNIT_SPEED),
          (l.sta = 2),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_MOVING + ")");
      else {
        var d = null != typeof r && null != r && r.indexOf("3005") >= 0;
        (l.sta = d ? 30 : 1),
          (l.tip = "0 " + s.UNIT_SPEED),
          (l.spd = a + s.UNIT_SPEED + " (" + s.JS_STATIC + ")");
      }
    o > 0 && (l.sta = 7),
      "black" == n
        ? (l.sta = 8)
        : "blue" == n
        ? (l.sta = 9)
        : "green" == n
        ? (l.sta = 10)
        : "gray" == n
        ? (l.sta = 11)
        : "orange" == n
        ? (l.sta = 12)
        : "purple" == n
        ? (l.sta = 13)
        : "red" == n
        ? (l.sta = 14)
        : "yellow" == n && (l.sta = 15);
  } else if (
    ((l.spd = a + " " + s.UNIT_SPEED), null == i || null == i || "" == i)
  )
    l.tip = s.JS_TIMEOUT_INVALID;
  else {
    var p = newDate(i).getTime() + 60 * new Date().getTimezoneOffset() * 1e3,
      c = (new Date().getTime() - p) / 1e3;
    l.tip =
      -1 == a
        ? s.JS_EXPIRED
        : c <= 0
        ? a + " " + s.UNIT_SPEED
        : c > 0 && c < 60
        ? "<1 " + s.JS_TIMEOUT_MINS
        : c >= 60 && c < 3600
        ? ">" + parseInt(c / 60) + " " + s.JS_TIMEOUT_MINS
        : c >= 3600 && c < 86400
        ? ">" + parseInt(c / 3600) + " " + s.JS_TIMEOUT_HOUR
        : c >= 86400 && c < 604800
        ? ">" + parseInt(c / 86400) + " " + s.JS_TIMEOUT_DAY
        : c >= 604800 && c < 2592e3
        ? ">" + parseInt(c / 604800) + " " + s.JS_TIMEOUT_WEEK
        : c >= 2592e3 && c < 31536e3
        ? ">" + parseInt(c / 2592e3) + " " + s.JS_TIMEOUT_MON
        : ">" + parseInt(c / 31536e3) + " " + s.JS_TIMEOUT_YEAR;
  }
  return l;
}
function getSpeedColor(t) {
  return t >= 120
    ? "#FF002A"
    : t >= 90
    ? "#9A009C"
    : t >= 80
    ? "#3200FF"
    : t > 40
    ? "#0096FE"
    : "#5DFEFE";
}
function getFlagById(t) {
  return window.parent.JS_DEVICE_FLAG4ID[t];
}
function getIdByFlag(t) {
  return window.parent.JS_DEVICE_ID4FLAG[t];
}
function updateFlag(t, e) {
  (window.parent.JS_DEVICE_FLAG4ID[t] = e), $("#asset_list_item").change();
}
function updateDeviceId(t, e) {
  (window.parent.JS_DEVICE_NO4ID[t] = e), $("#asset_list_item").change();
}
function updateSimcard(t, e) {
  (window.parent.JS_DEVICE_SIM4ID[t] = e), $("#asset_list_item").change();
}
function getStatusById(t) {
  return window.parent.JS_DEVICE_STATUS[t];
}
function getIoById(t) {
  return window.parent.JS_DEVICE_ID4IO[t];
}
function setStatusById(t, e) {
  window.parent.JS_DEVICE_STATUS[t] = e;
}
function getTypeById(t) {
  return window.parent.JS_DEVICE_TYPE4ID[t];
}
function updateDeviceType(t, e) {
  window.parent.JS_DEVICE_TYPE4ID[t] = e;
}
function getDeviceList() {
  var t = [],
    e = window.parent.JS_DEVICE_FLAG4ID;
  for (var a in e) t.push(e[a]);
  return t;
}
function getGroup4Flags() {
  var t = [],
    e = [],
    a = [],
    i = window.parent.JS_DEVICE_ID4GROUPID;
  for (var o in i) {
    var n = window.parent.JS_GROUP4NAME[i[o]],
      r = getFlagById(o);
    t[n] || ((t[n] = []), a.push(n)), t[n].push(r);
  }
  a = a.sort((t, e) => t.localeCompare(e));
  for (var s = 0; s < a.length; s++) e[a[s]] = t[a[s]];
  return e;
}
function getIDsList() {
  var t = [],
    e = window.parent.JS_DEVICE_NO4ID;
  for (var a in e) t.push(e[a]);
  return t;
}
function getSimList() {
  var t = [],
    e = window.parent.JS_DEVICE_SIM4ID;
  for (var a in e) t.push(e[a]);
  return t;
}
function getDriverList() {
  var t = [],
    e = window.parent.JSDEVICE_DRIVER4ID;
  for (var a in e) t.push(e[a]);
  return t;
}
function getGroupList() {
  return JS_GROUP;
}
function getPlaceList() {
  var t = [],
    e = window.parent.JS_PLACE_NAME4ID;
  for (var a in e) t.push(e[a]);
  return t;
}
function getPlaceById(t) {
  return window.parent.JS_PLACE_NAME4ID[t];
}
function updatePlace(t, e) {
  window.parent.JS_PLACE_NAME4ID[t] = e;
}
function getPlaceByName(t) {
  return window.parent.JS_PLACE_ID4NAME[t];
}
var Groups = [],
  GroupItem = [],
  ChangeItems = new Array(),
  $lastselect;
function addGroupItem(
  t,
  e,
  a,
  i,
  o,
  n,
  r,
  s,
  l,
  d,
  p,
  c,
  h,
  u,
  _,
  m,
  g,
  f,
  v,
  x,
  y,
  T,
  S,
  b,
  E,
  I,
  w
) {
  (zt = h),
    (h =
      null == h || 0 == h.length
        ? h
        : $.format.date(h, JS_DEFAULT_DATETIME_fmt_JS)),
    (u =
      null == u || 0 == u.length
        ? u
        : $.format.date(u, JS_DEFAULT_DATETIME_fmt_JS));
  var k,
    A,
    j = 1 == needShowAllAsset,
    C = t + "_" + a,
    D = Groups[C];
  D
    ? (D.attr("t") != i && (D.attr("t", i), D.children().eq(2).text(i)),
      (k = D.parent()))
    : ((k = $("<tbody></tbody>").appendTo("#" + t)),
      (D = A =
        $("<tr style='height: 25px;'></tr>")
          .attr("g", a)
          .attr("t", i)
          .appendTo(k)),
      $(
        "<th style='background-color: #F8F8F8;'><input style='margin: 0px 0px 0px 5px;' type='checkbox' class='showall'></input></th>"
      )
        .attr("title", JS_SHOW_ALL)
        .appendTo(A)
        .find("input")
        .prop("checked", j)
        .css({ opacity: j ? 1 : 0.5 }),
      $(
        "<th style='background-color: #F8F8F8;'><input style='margin: 0px 0px 0px 5px;' type='checkbox' class='trackall'></input></th>"
      )
        .attr("title", JS_TRACK_ALL)
        .appendTo(A),
      ($g = $(
        "<th style='word-wrap:break-word;word-break:break-all; background-color: #F8F8F8;'></th>"
      )
        .text(i)
        .attr("colspan", "8")),
      0 == JS_DEFAULT_COLLAPSED
        ? $g.addClass("group open").appendTo(A)
        : $g.addClass("group close").appendTo(A),
      (Groups[C] = D),
      "tree_all" == t && (JS_GROUP.push(i), (JS_GROUP4NAME[a] = i)));
  var L = GroupItem[t + "_" + o];
  if (L) {
    var J = L.find("td:eq(6)").attr("a");
    L.attr("s", v.sta)
      .attr("n", o)
      .attr("c", n)
      .attr("nc", r)
      .attr("si", s)
      .attr("i", p)
      .attr("sval", v.val)
      .attr("st", y)
      .attr("dn", I)
      .attr("ic", g)
      .attr("ar", f)
      .attr("io", T);
    var O = L.children();
    if (
      (O.eq(2)
        .attr("c", n)
        .attr("x", l)
        .attr("y", d)
        .attr("sp", b)
        .attr("d", c)
        .attr("i", p)
        .attr("t", h)
        .attr("dn", I)
        .attr("dt", S)
        .attr("io", T)
        .attr("zt", zt)
        .attr("nc", r)
        .attr("si", s)
        .attr("ex", w)
        .html(
          n +
            "<br/><span style='font-size:12px; color:#808080; white-space: nowrap;'>" +
            h +
            "</span>"
        ),
      O.eq(3)
        .html("<span>" + v.tip + "</span>")
        .attr("tip", v.tip),
      O.eq(5).attr("v", _),
      O.eq(6).attr("a", m),
      O.eq(7).attr("takn", getIdValue("5A:", T, !0)),
      O.eq(8).attr("takp", getIdValue("5B:", T, !0)),
      L.attr("g") != a)
    ) {
      L.attr("g", a);
      var N = L.parent();
      if ((L.next().remove(), L.remove(), 1 == N.children().length)) {
        var F = N.children().eq(0).attr("g");
        N.remove(), delete Groups[t + "_" + F];
      }
      L.appendTo(k),
        (A = $("<tr class='end_state'></tr>").insertAfter(L)),
        $("<td></td>").text("").appendTo(A),
        $("<td></td>").text("").appendTo(A),
        ($td = $("<td colspan=12></td>").appendTo(A)),
        $("<ul style='list-style: none;'></ul>").appendTo($td),
        $("<li style='width: 60px;' id='temp_1'></li>").appendTo($td),
        $("<li style='width: 60px;' id='fuel_1'></li>").appendTo($td),
        $(
          "<li style='width: 40px; cursor:pointer;' id='mil_24'></li>"
        ).appendTo($td),
        $("<li style='width: 45px;' id='max_speed_24'></li>").appendTo($td),
        $("<li style='width: 58px;' id='moving_time_24'></li>").appendTo($td),
        $("<li style='width: 60px;' id='idle_time_24'></li>").appendTo($td),
        $("<li style='width: 40px;' id='stop_time_24'></li>").appendTo($td),
        $("<li style='width: 45px;' id='engine_time_24'></li>").appendTo($td),
        $("<li style='width: 58px;' id='total_mil'></li>").appendTo($td),
        $("<li style='width: 62px;' id='door_state'></li>").appendTo($td),
        $("<li id='last_driver'></li>").appendTo($td);
    }
    if (
      (e == o && (needloc = !0),
      m > J && 1 == JS_DEFAULT_SOUND_ALARM && playAlarm(),
      "tree_all" == t && m > J && 1 == JS_DEFAULT_POPUP_ALARM)
    )
      dlgAlarmInfo(o, {
        n: o,
        c: n,
        nc: r,
        si: s,
        v: _,
        x: l,
        y: d,
        i: p,
        sta: v.sta,
        d: c,
        t: h,
        ts: u,
        spd: v.spd,
        a: m,
        s: b,
        st: y,
        io: T,
        dt: S,
        jb: E,
        dn: I,
      });
  } else {
    L = A = $("<tr></tr>")
      .attr("g", a)
      .attr("s", v.sta)
      .attr("n", o)
      .attr("c", n)
      .attr("nc", r)
      .attr("si", s)
      .attr("i", p)
      .attr("sval", v.val)
      .attr("st", y)
      .attr("dn", I)
      .attr("ic", g)
      .attr("ar", f)
      .attr("io", T)
      .appendTo(k);
    var M = !1;
    if ("tree_all" != t) {
      var q = GroupItem["tree_all_" + o];
      q &&
        ((j = q.find("td:eq(0) input").is(":checked")),
        (M = q.find("td:eq(1) input").is(":checked")));
    }
    if (
      ($(
        "<td><input style='margin: 0px 0px 0px 5px;' type='checkbox'></input></td>"
      )
        .attr("n", o)
        .attr("title", JS_SHOW)
        .appendTo(A)
        .find("input")
        .prop("checked", j),
      $(
        "<td><input style='margin: 0px 0px 0px 5px;' type='checkbox'></input></td>"
      )
        .attr("n", o)
        .attr("title", JS_TRACK)
        .appendTo(A)
        .find("input")
        .prop("checked", M),
      $("<td style='word-wrap:break-word;word-break:break-all;'></td>")
        .attr("c", n)
        .attr("x", l)
        .attr("y", d)
        .attr("sp", b)
        .attr("d", c)
        .attr("i", p)
        .attr("t", h)
        .attr("dn", I)
        .attr("dt", S)
        .attr("io", T)
        .attr("zt", zt)
        .attr("nc", r)
        .attr("si", s)
        .attr("ex", w)
        .html(
          n +
            "<br/><span style='font-size:12px; color:#808080; white-space: nowrap;'>" +
            h +
            "</span>"
        )
        .appendTo(A),
      $("<td></td>")
        .html("<span>" + v.tip + "</span>")
        .attr("tip", v.tip)
        .appendTo(A),
      $("<td></td>").appendTo(A),
      $("<td></td>").attr("v", _).appendTo(A),
      $("<td></td>").attr("a", m).appendTo(A),
      $("<td></td>").attr("takn", getIdValue("5A:", T, !0)).appendTo(A),
      $("<td></td>").attr("takp", getIdValue("5B:", T, !0)).appendTo(A),
      $("<td></td>").attr("mu", 1).appendTo(A),
      (GroupItem[t + "_" + o] = L),
      m > 0 && 1 == JS_DEFAULT_SOUND_ALARM && playAlarm(),
      "tree_all" == t && m > 0 && 1 == JS_DEFAULT_POPUP_ALARM)
    )
      dlgAlarmInfo(o, {
        n: o,
        c: n,
        nc: r,
        si: s,
        v: _,
        x: l,
        y: d,
        i: p,
        sta: v.sta,
        d: c,
        t: h,
        ts: u,
        spd: v.spd,
        a: m,
        s: b,
        st: y,
        io: T,
        dt: S,
        jb: E,
        dn: I,
      });
    (A = $("<tr class='end_state'></tr>").insertAfter(L)),
      $("<td></td>").text("").appendTo(A),
      $("<td></td>").text("").appendTo(A),
      ($td = $("<td colspan=12></td>").appendTo(A)),
      $("<ul style='list-style: none;'></ul>").appendTo($td),
      $("<li style='width: 60px;' id='temp_1'></li>").appendTo($td),
      $("<li style='width: 60px;' id='fuel_1'></li>").appendTo($td),
      $("<li style='width: 40px; cursor:pointer;' id='mil_24'></li>").appendTo(
        $td
      ),
      $("<li style='width: 45px;' id='max_speed_24'></li>").appendTo($td),
      $("<li style='width: 58px;' id='moving_time_24'></li>").appendTo($td),
      $("<li style='width: 60px;' id='idle_time_24'></li>").appendTo($td),
      $("<li style='width: 40px;' id='stop_time_24'></li>").appendTo($td),
      $("<li style='width: 45px;' id='engine_time_24'></li>").appendTo($td),
      $("<li style='width: 58px;' id='total_mil'></li>").appendTo($td),
      $("<li style='width: 62px;' id='door_state'></li>").appendTo($td),
      $("<li id='last_driver'></li>").appendTo($td);
  }
  if (
    (L.parent().children().eq(0).find("th:eq(2)").hasClass("open")
      ? (L.show(), L.next().show())
      : (L.hide(), L.next().hide()),
    x && e == o && (L.addClass("active"), L.next().addClass("active")),
    ChangeItems.push(L),
    x)
  )
    try {
      x.DrawIcon(
        o,
        n,
        r,
        s,
        _,
        l,
        d,
        p,
        v.sta,
        c,
        h,
        u,
        v.spd,
        m,
        !1,
        b,
        y,
        T,
        S,
        E,
        I,
        ANIMATION_TIME
      ),
        j && x.HideShowMarker(!0, o),
        L.find("td:eq(1) input").is(":checked")
          ? map_locate(o, e == o, e == o, !0, !1)
          : L.find("td:eq(0) input").is(":checked") &&
            e == o &&
            map_locate(o, !0, !1, !1, !1);
    } catch (t) {}
  if ("tree_all" == t) {
    var P = getIdValue("125:", T, !0),
      U = getIdValue("F7:", T, !0);
    if (null != P) {
      race_array[0] = L;
      for (var R = 1; R < race_array.length; R++)
        n == race_array[R].attr("c") && race_array.splice(R, 1);
      console.log("1=" + n);
    } else if (null != U)
      if (void 0 === race_array[1]) (race_array[1] = L), console.log("21=" + n);
      else {
        var H = race_array[1],
          G = H.attr("c"),
          V = getIdValue("F7:", H.attr("io"), !0);
        G == n
          ? ((race_array[1] = L), console.log("22=" + n))
          : parseFloat(V) < parseFloat(U)
          ? ((race_array[2] = race_array[1]),
            (race_array[1] = L),
            console.log("23=" + n))
          : ((race_array[2] = L), console.log("31=" + n));
      }
  }
}
function findGroupItem(t, e) {
  return !!GroupItem[t + "_" + e];
}
function removeGroupItem(t, e, a) {
  var i = t + "_" + a,
    o = GroupItem[i];
  o && (o.next().remove(), o.remove(), delete GroupItem[i]);
  var n = t + "_" + e,
    r = Groups[n];
  if (r && 1 == r.parent().children().length) {
    var s = r.parent();
    r.remove(), s.remove(), delete Groups[n];
  }
}
function deleteObject(t, e) {
  findGroupItem("tree_online", e) && removeGroupItem("tree_online", t, e),
    findGroupItem("tree_offline", e) && removeGroupItem("tree_offline", t, e),
    findGroupItem("tree_expired", e) && removeGroupItem("tree_expired", t, e),
    findGroupItem("tree_all", e) && removeGroupItem("tree_all", t, e),
    delete window.parent.JS_DEVICE_FLAG4ID[e],
    delete window.parent.JS_DEVICE_ID4GROUPID[e],
    map.RemoveMarker(e),
    updateStatusCount();
}
function deleteGroup(t) {
  var e = "tree_all_" + t;
  if (null != Groups[e] && void 0 !== Groups[e]) {
    var a = Groups[e].parent().children();
    $(a).each(function (e, a) {
      var i = $(a).attr("n");
      i && deleteObject(t, i);
    });
  }
}
function deletePlace(t) {
  delete window.parent.JS_PLACE_NAME4ID[t];
}
function addGroup(t, e, a, i) {
  for (var o, n = 0; n < t.item.length; n++) {
    setStatusById((o = t.item[n]).n, o.e);
    var r = getSpeedState(o.on, o.v, o.s, o.t, o.a, o.ar, o.st);
    0 == o.on
      ? (!i &&
          findGroupItem("tree_online", o.n) &&
          removeGroupItem("tree_online", t.gid, o.n),
        -1 == o.s
          ? (!i &&
              findGroupItem("tree_offline", o.n) &&
              removeGroupItem("tree_offline", t.gid, o.n),
            addGroupItem(
              "tree_expired",
              e,
              t.gid,
              t.gtxt,
              o.n,
              o.c,
              o.nc,
              o.si,
              o.x,
              o.y,
              o.i,
              o.d,
              o.t,
              o.ts,
              o.v,
              o.a,
              o.ic,
              o.ar,
              r,
              null,
              o.st,
              o.io,
              o.dt,
              o.s,
              o.jb,
              o.dn,
              o.ex
            ))
          : (!i &&
              findGroupItem("tree_expired", o.n) &&
              removeGroupItem("tree_expired", t.gid, o.n),
            addGroupItem(
              "tree_offline",
              e,
              t.gid,
              t.gtxt,
              o.n,
              o.c,
              o.nc,
              o.si,
              o.x,
              o.y,
              o.i,
              o.d,
              o.t,
              o.ts,
              o.v,
              o.a,
              o.ic,
              o.ar,
              r,
              null,
              o.st,
              o.io,
              o.dt,
              o.s,
              o.jb,
              o.dn,
              o.ex
            )))
      : (!i &&
          findGroupItem("tree_offline", o.n) &&
          removeGroupItem("tree_offline", t.gid, o.n),
        !i &&
          findGroupItem("tree_expired", o.n) &&
          removeGroupItem("tree_expired", t.gid, o.n),
        addGroupItem(
          "tree_online",
          e,
          t.gid,
          t.gtxt,
          o.n,
          o.c,
          o.nc,
          o.si,
          o.x,
          o.y,
          o.i,
          o.d,
          o.t,
          o.ts,
          o.v,
          o.a,
          o.ic,
          o.ar,
          r,
          null,
          o.st,
          o.io,
          o.dt,
          o.s,
          o.jb,
          o.dn,
          o.ex
        )),
      addGroupItem(
        "tree_all",
        e,
        t.gid,
        t.gtxt,
        o.n,
        o.c,
        o.nc,
        o.si,
        o.x,
        o.y,
        o.i,
        o.d,
        o.t,
        o.ts,
        o.v,
        o.a,
        o.ic,
        o.ar,
        r,
        a,
        o.st,
        o.io,
        o.dt,
        o.s,
        o.jb,
        o.dn,
        o.ex
      );
  }
  o = null;
}
function clearList(t) {
  $("#" + t + " tbody").remove();
}
function dlgTrackInfo(t, e) {
  window.open("track.view.php?objid=" + t + "&oflag=" + e, "_blank");
}
function showTrackInfo(t) {
  $("#mnuOperat").hide(),
    (null != t && null != typeof t) || (t = menu_operator_id),
    dlgTrackInfo(t, getFlagById(t));
}
function cancelAlarm(t, e) {
  showLoading(!0);
  var a = setTimeout("showLoading(false,true)", requestTimeout);
  $.get("alarm.ajax.php", { delid: e }, function (e) {
    clearTimeout(a), showLoading(!1);
    try {
      $(t).parent().remove();
    } catch (t) {
      showLoading(!1);
    }
  });
}
function dlgAlarmInfo(keyid, toastShow) {
  var timer = null,
    needfish = 1;
  (void 0 !== toastShow && 0 != toastShow) ||
    (showLoading(!0),
    (timer = setTimeout("showLoading(false,true)", requestTimeout)),
    (needfish = 0)),
    $.get(
      "alarm.ajax.php",
      { objid: keyid, needfish: needfish },
      function (data) {
        try {
          if (void 0 === toastShow || 0 == toastShow) {
            showLoading(!1), null != timer && clearTimeout(timer);
            var json = eval("(" + data + ")");
            ($dlg = $("#dlg_altinfo")),
              $dlg.css("display", "block"),
              $("body").append("<div class='modalmask'></div>"),
              $dlg.append("<span id='close' class='dialog_cancel'></span>");
            var $ul = $dlg.find("#altul");
            $ul.empty();
            for (var i = 0; i < json.length; i++) {
              var jo = json[i],
                status =
                  "[ " +
                  jo.c +
                  " ]<br><input class='delete' type='button' onClick='cancelAlarm(this," +
                  jo.n +
                  ")' value='' />[ " +
                  (i + 1) +
                  " ] " +
                  jo.a +
                  "<br>" +
                  $.format.date(jo.t, JS_DEFAULT_DATETIME_fmt_JS) +
                  "<br><a class='tab' style ='font-size: 12px; color: #4D8ED9; text-decoration: none;' target='_blank' href=" +
                  JS_GOOGLE_MAP_BASE_LINK +
                  "/maps?hl=en&q=" +
                  jo.y / 1e6 +
                  "," +
                  jo.x / 1e6 +
                  ">" +
                  (jo.y / 1e6).toFixed(5) +
                  "," +
                  (jo.x / 1e6).toFixed(5) +
                  " </a><br>" +
                  jo.e +
                  "<br>";
              $("<li></li>").html(status).appendTo($ul);
            }
            $dlg.find("span#altinfo").html(status),
              $dlg.find("#close").click(function () {
                $dlg.css("display", "none"),
                  $(this).remove(),
                  $(".modalmask").remove();
              }),
              $dlg.find("#button_ok").click(function () {
                $dlg.css("display", "none"),
                  $dlg.find("#close").remove(),
                  $(".modalmask").remove();
              }),
              $dlg.css(
                "top",
                Math.round(document.body.clientHeight / 2 - $dlg.height() / 2) +
                  "px"
              ),
              $dlg.css(
                "left",
                Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) +
                  "px"
              ),
              $("#altul").parent().scrollTop(0);
          } else
            for (
              var json = eval("(" + data + ")"), i = 0;
              i < json.length;
              i++
            ) {
              var jo = json[i];
              jo.n > lastAlarmId &&
                ((toastShow.x = jo.x),
                (toastShow.y = jo.y),
                (toastShow.s = jo.s),
                (toastShow.t = jo.t),
                (toastShow.st = jo.st),
                (toastShow.io = jo.io),
                toastr.error(
                  $.format.date(jo.t, JS_DEFAULT_DATETIME_fmt_JS) +
                    "<br>" +
                    jo.a,
                  toastShow.c,
                  {
                    closeButton: !0,
                    debug: !1,
                    newestOnTop: !1,
                    progressBar: !1,
                    positionClass: "toast-top-right",
                    preventDuplicates: !1,
                    onclick: function () {
                      if (map)
                        try {
                          map.DrawIcon(
                            -1e3,
                            toastShow.c,
                            toastShow.nc,
                            toastShow.si,
                            toastShow.v,
                            toastShow.x,
                            toastShow.y,
                            toastShow.i,
                            toastShow.sta,
                            toastShow.d,
                            toastShow.t,
                            toastShow.ts,
                            toastShow.spd,
                            toastShow.a,
                            !0,
                            toastShow.s,
                            toastShow.st,
                            toastShow.io,
                            toastShow.dt,
                            toastShow.jb,
                            toastShow.dn
                          ),
                            map.HideShowMarker(!0, -1e3),
                            releaseTrack(),
                            hideAlarmMarker(),
                            alarmtimer &&
                              (clearTimeout(alarmtimer), (alarmtimer = null)),
                            (alarmtimer = setTimeout(
                              "clearAlarm(" + toastShow.n + ");",
                              6e4
                            ));
                        } catch (t) {
                          alert(t);
                        }
                    },
                    showDuration: "300",
                    hideDuration: "1000",
                    timeOut: "300000",
                    extendedTimeOut: "1000",
                    showEasing: "swing",
                    hideEasing: "linear",
                    showMethod: "fadeIn",
                    hideMethod: "fadeOut",
                  }
                ),
                (lastAlarmId = jo.n));
            }
        } catch (t) {
          showLoading(!1);
        }
      }
    );
}
function hideAlarmMarker() {
  alarmtimer2 && (clearTimeout(alarmtimer2), (alarmtimer2 = null)),
    (alarmtimer2 = setTimeout("map.HideShowMarker(false, -1000);", 3e4));
}
function getLastAlarms(keyid, $element, $marker) {
  queryingAlarm = !0;
  var timer = setTimeout("queryingAlarm = false", requestTimeout);
  $.get("alarm.ajax.php", { objid: keyid, needfish: 0 }, function (data) {
    clearTimeout(timer),
      (queryingAlarm = !1),
      $element.removeClass("query_waiting");
    try {
      if ("." == data)
        (objLastEvent[keyid] = null), showLastAlarms(keyid, $element, $marker);
      else {
        var json = eval("(" + data + ")");
        null != json &&
          json.length > 0 &&
          ((objLastEvent[keyid] = json),
          showLastAlarms(keyid, $element, $marker));
      }
    } catch (t) {
      queryingAlarm = !1;
    }
  });
}
function showLastAlarms(t, e, a) {
  e.empty();
  var i = !1,
    o = $("<table></table>").appendTo(e),
    n = objLastEvent[t];
  if (null != n) {
    e.css("text-align", "left");
    for (var r = 0; r < n.length; r++) {
      var s = n[r],
        l = $("<tr></tr>").appendTo(o);
      $(
        "<td class='lastEvent' title='" +
          s.t +
          " " +
          s.a +
          "' nowrap='nowrap' style='cursor:pointer; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; width: 100%;'></td>"
      )
        .attr("n", s.n)
        .attr("c", s.c)
        .attr("x", s.x)
        .attr("y", s.y)
        .attr("t", s.t)
        .attr("ts", s.ts)
        .attr("s", s.s)
        .attr("d", s.d)
        .attr("e", s.e)
        .attr("st", s.st)
        .attr("io", s.io)
        .text(s.t.split(" ")[1] + "  " + s.a)
        .appendTo(l)
        .unbind("click")
        .click(function () {
          var t = getSpeedState(
              1,
              1,
              $(this).attr("s"),
              $(this).attr("t"),
              1,
              $(this).attr("st")
            ),
            e = $(this).attr("io"),
            i = getIdValue("5F:", e, !0),
            o = getIdValue("5E:", e, !0);
          map.DrawIcon(
            -1e3,
            $(this).attr("c"),
            a.properties.nc,
            a.properties.si,
            1,
            $(this).attr("x"),
            $(this).attr("y"),
            a.properties.ico,
            7,
            $(this).attr("d"),
            $(this).attr("t"),
            $(this).attr("ts"),
            t.spd,
            $(this).attr("a"),
            !0,
            $(this).attr("s"),
            $(this).attr("st"),
            e,
            a.properties.dt,
            i,
            o
          ),
            map.HideShowMarker(!0, -1e3),
            hideAlarmMarker(),
            releaseTrack();
        }),
        (i = !0);
    }
  }
  i ||
    (e.css("text-align", "center"),
    $(
      "<label nowrap='nowrap' style='padding: 2px; height: 60px; width: 100%; font-size:15pt; color: #AAAAAA; line-height: 70px;'></label>"
    )
      .text(JS_NO_DATA)
      .appendTo(e));
}
function getLast5daysMiEg(keyid, $elementMi, $elementEg, $elementLd) {
  queryingMilEng = !0;
  var timer = setTimeout("queryingMilEng = false", requestTimeout);
  $.get(
    "stastics.ajax.php",
    { rtime: !0, objid: keyid, type: 51, etime: getCurentDateTime() },
    function (data) {
      clearTimeout(timer),
        (queryingMilEng = !1),
        $elementMi.removeClass("query_waiting"),
        $elementEg.removeClass("query_waiting"),
        $elementLd.removeClass("query_waiting");
      try {
        var json = eval("(" + data + ")");
        null != json &&
          json.length > 0 &&
          ((objLastMiEg[keyid] = json),
          createLast5daysMiEgBar(keyid, $elementMi, $elementEg, $elementLd));
      } catch (t) {
        queryingMilEng = !1;
      }
    }
  );
}
function getLastMaTa(keyid, $elementMa, $elementTa, $odometer, $engineHour) {
  queryingMaTa = !0;
  var timer = setTimeout("queryingMaTa = false", requestTimeout);
  $.get("last.maintain.task.ajax.php", { objid: keyid }, function (data) {
    clearTimeout(timer),
      (queryingMaTa = !1),
      $elementMa.removeClass("query_waiting"),
      $elementTa.removeClass("query_waiting");
    try {
      var json = eval("(" + data + ")");
      null != json &&
        ((objLastMaTa[keyid] = json),
        showLastMaTa(keyid, $elementMa, $elementTa, $odometer, $engineHour));
    } catch (t) {
      queryingMaTa = !1;
    }
  });
}
function showLastMaTa(t, e, a, i, o) {
  e.empty();
  var n = !1,
    r = $("<table></table>").appendTo(e);
  if (null != (D = objLastMaTa[t])) {
    var s = D.mt;
    if (null != s) {
      var l = (N = s[0]).mile,
        d = N.milv,
        p = N.miln;
      if (
        (-0 ==
          (k =
            null == N.mill || 0 == N.mill.length
              ? 0
              : (d - (i - N.mill)).toFixed(0)) && (k = 0),
        1 == l && d > 0 && null != p && p.length > 0 && k >= 0 && i > 0)
      ) {
        var c = $("<tr></tr>").appendTo(r),
          h = $(
            "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
          )
            .text(p)
            .appendTo(c);
        (h = $(
          "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
        )
          .html(k + "&nbsp;" + UNIT_DIST + ".&nbsp;" + JS_LEFT)
          .appendTo(c)),
          k <= 100 && h.addClass("info_warning"),
          (n = !0);
      }
      var u = N.enge,
        _ = N.engv,
        m = N.engn;
      if (
        (-0 ==
          (A =
            null == N.engl || 0 == N.engl.length
              ? 0
              : (_ - (o - N.engl)).toFixed(0)) && (A = 0),
        1 == u && _ > 0 && null != m && m.length > 0 && A >= 0 && o > 0)
      ) {
        var g = $("<tr></tr>").appendTo(r),
          f = $(
            "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
          )
            .text(m)
            .appendTo(g);
        (f = $(
          "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
        )
          .html(A + "&nbsp;h.&nbsp;" + JS_LEFT)
          .appendTo(g)),
          A <= 100 && f.addClass("info_warning"),
          (n = !0);
      }
      var v = N.daye,
        x = N.dayv,
        y = N.dayn;
      if (
        (-0 ==
          (j =
            null == N.dayl || 10 != N.dayl.length
              ? 0
              : (
                  x -
                  parseInt(
                    (new Date().getTime() - newDate(N.dayl).getTime()) / 864e5
                  )
                ).toFixed(0)) && (j = 0),
        1 == v && x > 0 && (null != y) & (y.length > 0) && j >= 0)
      ) {
        var T = $("<tr></tr>").appendTo(r),
          S = $(
            "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
          )
            .text(y)
            .appendTo(T);
        (S = $(
          "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
        )
          .html(j + "&nbsp;d.&nbsp;" + JS_LEFT)
          .appendTo(T)),
          j <= 15 && S.addClass("info_warning"),
          (n = !0);
      }
      var b = N.custm;
      if (null != b && b.length > 0)
        for (var E = b.split(";"), I = 0; I < E.length; I++)
          if (null != E[I] && E[I].length > 0) {
            var w = E[I].split(",");
            if (null != w && 5 == w.length)
              if (null != w[0] && "1" == w[0]) {
                (w[2] = mileageUnitConversion(
                  10 * parseInt(w[2]),
                  JS_UNIT_DISTANCE
                ).toFixed(0)),
                  (w[4] = mileageUnitConversion(
                    10 * parseInt(w[4]),
                    JS_UNIT_DISTANCE
                  ).toFixed(0));
                var k;
                (l = w[1]), (d = w[2]), (p = w[3]);
                if (
                  (-0 ==
                    (k =
                      null == w[4] || 0 == w[4].length
                        ? 0
                        : (parseFloat(d) - (i - parseFloat(w[4]))).toFixed(
                            0
                          )) && (k = 0),
                  1 == l &&
                    d > 0 &&
                    null != p &&
                    p.length > 0 &&
                    k >= 0 &&
                    i > 0)
                ) {
                  (c = $("<tr></tr>").appendTo(r)),
                    (h = $(
                      "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
                    )
                      .text(p)
                      .appendTo(c));
                  (h = $(
                    "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
                  )
                    .html(k + "&nbsp;" + UNIT_DIST + ".&nbsp;" + JS_LEFT)
                    .appendTo(c)),
                    k <= 100 && h.addClass("info_warning"),
                    (n = !0);
                }
              } else if (null != w[0] && "2" == w[0]) {
                var A;
                (u = w[1]), (_ = w[2]), (m = w[3]);
                if (
                  (-0 ==
                    (A =
                      null == w[4] || 0 == w[4].length
                        ? 0
                        : (parseFloat(_) - (o - parseFloat(w[4]))).toFixed(
                            0
                          )) && (A = 0),
                  1 == u &&
                    _ > 0 &&
                    null != m &&
                    m.length > 0 &&
                    A >= 0 &&
                    o > 0)
                ) {
                  (g = $("<tr></tr>").appendTo(r)),
                    (f = $(
                      "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
                    )
                      .text(m)
                      .appendTo(g));
                  (f = $(
                    "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
                  )
                    .html(A + "&nbsp;h.&nbsp;" + JS_LEFT)
                    .appendTo(g)),
                    A <= 100 && f.addClass("info_warning"),
                    (n = !0);
                }
              } else if (null != w[0] && "3" == w[0]) {
                var j;
                (v = w[1]), (x = w[2]), (y = w[3]);
                if (
                  (-0 ==
                    (j =
                      null == w[4] || 0 == w[4].length
                        ? 0
                        : (
                            parseFloat(x) -
                            parseInt(
                              (new Date().getTime() -
                                newDate(w[4].split(" ")[0]).getTime()) /
                                864e5
                            )
                          ).toFixed(0)) && (j = 0),
                  1 == v && x > 0 && null != y && y.length > 0 && j >= 0)
                ) {
                  (T = $("<tr></tr>").appendTo(r)),
                    (S = $(
                      "<td class='lastMa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
                    )
                      .text(y)
                      .appendTo(T));
                  (S = $(
                    "<td class='lastMa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
                  )
                    .html(j + "&nbsp;d.&nbsp;" + JS_LEFT)
                    .appendTo(T)),
                    j <= 15 && S.addClass("info_warning"),
                    (n = !0);
                }
              }
          }
    }
  }
  if (!n) {
    var C = $("<tr></tr>").appendTo(r);
    $(
      "<td nowrap='nowrap' align='center' valign='middle' style='padding: 2px; height: 60px; width: 100%; font-size:15pt; color: #AAAAAA;'></td>"
    )
      .text(JS_NO_DATA)
      .appendTo(C);
  }
  a.empty();
  var D,
    L = !1,
    J = $("<table></table>").appendTo(a);
  if (null != (D = objLastMaTa[t])) {
    var O = D.ta;
    if (null != O)
      for (I = 0; I < O.length; I++) {
        var N,
          F = (N = O[I]).tn,
          M = N.ts,
          q = $("<tr></tr>").appendTo(J),
          P = $(
            "<td class='lastTa' nowrap='nowrap' style='border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; padding: 2px; min-width: 80px;'></td>"
          )
            .text(F)
            .appendTo(q);
        (P = $(
          "<td class='lastTa' nowrap='nowrap' style='padding: 2px 2px 2px 20px; border-left: 0px solid; border-right: 0px solid; border-top: 0px solid;  border-bottom: 1px solid #EEE; min-width: 80px;'></td>"
        ).appendTo(q)),
          0 == M
            ? P.html(JS_TASK_NEW_INFO).addClass("task_new")
            : 1 == M
            ? P.html(JS_TASK_PROCESSING_INFO).addClass("task_in_progress")
            : 2 == M
            ? P.html(JS_TASK_FINISH).addClass("task_finish")
            : 3 == M && P.html(JS_TASK_FAIL).addClass("task_fail"),
          (L = !0);
      }
  }
  if (!L)
    (q = $("<tr></tr>").appendTo(J)),
      (P = $(
        "<td nowrap='nowrap' align='center' valign='middle' style='padding: 2px; height: 60px; width: 100%; font-size:15pt; color: #AAAAAA;'></td>"
      )
        .text(JS_NO_DATA)
        .appendTo(q));
}
function getLastDriver(keyid, jb, $element) {
  queryingDriver = !0;
  var timer = setTimeout("queryingDriver = false", requestTimeout);
  $.get("driver.image.ajax.php", { jb: jb, full: !0 }, function (data) {
    if (
      (clearTimeout(timer),
      (queryingDriver = !1),
      $element.removeClass("query_waiting"),
      null != data && "none" != data)
    ) {
      var json = eval("(" + data + ")");
      (null != json.pi && 0 != json.pi.length) ||
        (json.pi =
          "<img src='img/none driver.png' alt='null' height='89' width='80'>"),
        (objLastDriver[keyid] = json),
        (map.drivers[keyid].img = json.pi),
        (map.drivers4jb[jb] = map.drivers[keyid]);
    } else {
      var json = {
        dn: "---",
        ph: "---",
        rf: "---",
        pi: "<img src='img/none driver.png' alt='null' height='89' width='80'>",
      };
      objLastDriver[keyid] = json;
    }
    showLastDriver(keyid);
  });
}
function showLastDriver(t) {
  if (
    ($("#sta_last_driver_info").empty(),
    $("#sta_last_driver_img ul").empty(),
    null != objLastDriver[t])
  ) {
    var e = objLastDriver[t].dn,
      a =
        null == objLastDriver[t].ph || 0 == objLastDriver[t].ph.length
          ? "---"
          : objLastDriver[t].ph,
      i =
        null == objLastDriver[t].rf || 0 == objLastDriver[t].rf.length
          ? "---"
          : objLastDriver[t].rf,
      o = $("<ul></ul>").appendTo($("#sta_last_driver_info"));
    $("<li>" + e + "</li>")
      .addClass("driver_name")
      .appendTo(o),
      $("<li>" + a + "</li>")
        .addClass("driver_phone")
        .appendTo(o),
      $("<li>" + i + "</li>")
        .addClass("driver_rfid")
        .appendTo(o),
      $("<li>" + objLastDriver[t].pi + "</li>").appendTo(
        $("#sta_last_driver_img ul")
      );
  }
}
function getLastPhoto(keyid, $element) {
  queryingPhoto = !0;
  var timer = setTimeout("queryingPhoto = false", requestTimeout);
  $.get("last.photo.ajax.php", { objid: keyid, size: !0 }, function (data) {
    if (
      (clearTimeout(timer),
      (queryingPhoto = !1),
      $element.removeClass("query_waiting"),
      null != data && "none" != data)
    ) {
      var json = eval("(" + data + ")");
      objLastPhoto[keyid] = json;
    } else {
      var json = { img: "---", time: "---" };
      objLastPhoto[keyid] = json;
    }
    displayLastPhoto(keyid);
  });
}
function displayLastPhoto(t) {
  if (
    ($("#sta_last_photo").empty(),
    $("#sta_last_photo_title").empty(),
    null != objLastPhoto[t])
  ) {
    var e = objLastPhoto[t].img,
      a = objLastPhoto[t].time;
    "---" != a
      ? $("#sta_last_photo_title").text(JS_LAST_PHOTO + "(" + a + ")")
      : $("#sta_last_photo_title").text(JS_LAST_PHOTO),
      "---" == e &&
        (e = $(
          "<label nowrap='nowrap' style='padding: 2px; height: 60px; width: 100%; font-size:15pt; color: #AAAAAA; line-height: 70px;'></label>"
        ).text(JS_NO_DATA)),
      $("#sta_last_photo").append(e);
  }
}
function clearAlarm(t) {
  $("#tab_all .tree_table")
    .find("tbody tr[n=" + t + "]")
    .find("td:eq(0) input")
    .is(":checked") || map.HideShowMarker(!1, t);
}
function showAlarmInfo(t) {
  dlgAlarmInfo(t);
}
function showLastPhoto(keyid) {
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.get("last.photo.ajax.php", { objid: keyid }, function (data) {
      clearTimeout(timer), showLoading(!1);
      var jo = eval("(" + data + ")");
      null != jo && "none" != jo
        ? (($dlg = $("#dlg_lastphoto")),
          $("#lastphoto").empty(),
          $dlg.css("display", "block"),
          $("body").append("<div class='modalmask'></div>"),
          $dlg.append("<span id='close' class='dialog_cancel'></span>"),
          $dlg.find("#close").click(function () {
            $dlg.css("display", "none"),
              $(this).remove(),
              $(".modalmask").remove();
          }),
          $dlg.find("#button_ok").click(function () {
            $dlg.css("display", "none"),
              $dlg.find("#close").remove(),
              $(".modalmask").remove();
          }),
          $("#phototime").html(jo.time),
          $("#lastphoto").append(jo.img),
          $dlg.css(
            "top",
            Math.round(
              document.body.clientHeight / 2 - ($dlg.height() / 3) * 2
            ) + "px"
          ),
          $dlg.css(
            "left",
            Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
          ))
        : showMessage("info", JS_LAST_PHOTO, JS_NO_PHOTO);
    });
  } catch (t) {
    showLoading(!1), showMessage("info", JS_LAST_PHOTO, JS_NO_PHOTO);
  }
}
function showLastVoice(keyid) {
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.get("last.voice.ajax.php", { objid: keyid }, function (data) {
      clearTimeout(timer), showLoading(!1);
      var jo = eval("(" + data + ")");
      null != jo && "none" != jo
        ? (($dlg = $("#dlg_lastvoice")),
          $("#lastvoice").empty(),
          $dlg.css("display", "block"),
          $("body").append("<div class='modalmask'></div>"),
          $dlg.append("<span id='close' class='dialog_cancel'></span>"),
          $dlg.find("#close").click(function () {
            $dlg.css("display", "none"),
              $(this).remove(),
              $(".modalmask").remove();
          }),
          $dlg.find("#button_ok").click(function () {
            $dlg.css("display", "none"),
              $dlg.find("#close").remove(),
              $(".modalmask").remove();
          }),
          $("#voicetime").html(jo.time),
          $("#lastvoice").append(jo.audio),
          $dlg.css(
            "top",
            Math.round(
              document.body.clientHeight / 2 - ($dlg.height() / 3) * 2
            ) + "px"
          ),
          $dlg.css(
            "left",
            Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
          ))
        : showMessage("info", JS_LAST_VOICE, JS_NO_VOICE);
    });
  } catch (t) {
    showLoading(!1), showMessage("info", JS_LAST_VOICE, JS_NO_VOICE);
  }
}
function showSharePositionInfo(t) {
  $("#mnuOperat").hide(),
    (null != t && null != typeof t) || (t = menu_operator_id),
    loadSharePosition(t);
}
function loadSharePosition(keyid) {
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.post("share.position.ajax.php", { type: 1 }, function (data) {
      if (
        (clearTimeout(timer),
        showLoading(!1),
        ($dlg = $("#dlg_shareposition")),
        $dlg.css("display", "block"),
        $("body").append("<div class='modalmask'></div>"),
        $dlg.append("<span id='close' class='dialog_cancel'></span>"),
        $dlg.find("#close").click(function () {
          $dlg.css("display", "none"),
            $(this).remove(),
            $(".modalmask").remove();
        }),
        $("#share_position_addnew")
          .unbind("click")
          .click(function () {
            sharePositionView(1, null, null);
          }),
        $dlg.find("#button_cancel").click(function () {
          $dlg.css("display", "none"),
            $dlg.find("#close").remove(),
            $(".modalmask").remove();
        }),
        $dlg.css(
          "top",
          Math.round(document.body.clientHeight / 2 - ($dlg.height() / 3) * 2) +
            "px"
        ),
        $dlg.css(
          "left",
          Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
        ),
        ($table = $("#share_position_list")),
        $table.find("tbody").remove(),
        null != typeof data && null != data && data.length > 1)
      ) {
        var jo = eval("(" + data + ")");
        if (null != jo && "none" != jo) {
          var $tbody = $("<tbody></tbody>").appendTo($table);
          mgrshare_position_array_name = [];
          for (var i = 0; i < jo.length; i++) {
            var $tr = $("<tr></tr>").appendTo($tbody);
            $("<td></td>")
              .text(i + 1)
              .attr("shid", jo[i].shid)
              .appendTo($tr),
              $("<td></td>").text(jo[i].sn).attr("sn", jo[i].sn).appendTo($tr),
              mgrshare_position_array_name.push(jo[i].sn),
              $("<td></td>").text(jo[i].e).appendTo($tr),
              $("<td></td>").text(jo[i].p).appendTo($tr);
            var assets = null == jo[i].oids ? 0 : jo[i].oids.split(",").length;
            if (($("<td></td>").text(assets).appendTo($tr), 0 == jo[i].sa)) {
              $td = $("<td data-sort=" + jo[i].sa + "></td>").appendTo($tr);
              var str = "<a style='padding-left: 20px; cursor: default;'></a>";
              $(str).attr("href", "#").addClass("state_disable").appendTo($td);
            } else {
              $td = $("<td data-sort=" + jo[i].sa + "></td>").appendTo($tr);
              var str = "<a style='padding-left: 20px; cursor: default;'></a>";
              $(str).attr("href", "#").addClass("state_enable").appendTo($td);
            }
            1 == jo[i].ee
              ? $(
                  "<td data-sort=" +
                    (null == jo[i].et || 0 == jo[i].et.length
                      ? jo[i].et
                      : newDate(jo[i].et).getTime()) +
                    "></td>"
                )
                  .text(
                    null == jo[i].et || 0 == jo[i].et.length
                      ? jo[i].et
                      : $.format.date(jo[i].et, JS_DEFAULT_DATETIME_fmt_JS)
                  )
                  .appendTo($tr)
              : $("<td></td>").text("").appendTo($tr),
              ($td = $("<td></td>").appendTo($tr));
            var str =
              "<a style='padding-left: 20px;' onclick='sharePositionView(2," +
              keyid +
              "," +
              jo[i].shid +
              ")'></a>";
            $(str).attr("href", "#").addClass("operate_edit").appendTo($td),
              (str =
                "<a style='padding-left: 20px;' onclick='sharePositionView(3," +
                keyid +
                "," +
                jo[i].shid +
                ")'></a>"),
              $(str).attr("href", "#").addClass("operate_delete").appendTo($td);
          }
          "1" == $("#mgrshare_position_item").val() &&
            $("#mgrshare_position_cond")
              .focus(function () {
                $(this).autocomplete("search", $(this).val());
              })
              .autocomplete({
                source: mgrshare_position_array_name,
                minLength: mgrshare_position_array_name.length < 2e3 ? 0 : 2,
                max: 10,
                scroll: !0,
              });
        }
      }
      null != keyid && sharePositionView(1, keyid, null);
    });
  } catch (t) {
    showMessage("stop", JS_SHARE_POSITION, JS_SHARE_FAIL);
  }
}
function sharePositionView(t, e, a) {
  $("#mnuOperat").hide(),
    3 != t && (sharePositionState(e), sharePositionFill()),
    1 == t
      ? (null != e &&
          ($("#share_position_assets").val(e),
          $("#share_position_assets").multiselect("reload")),
        showSharePositionDlg(t, e, a))
      : (locate_table("#share_position_list", "shid", a, !0),
        dlgSharePositionInfo(t, e, a));
}
function sharePositionState(t) {
  var e = $("#dlg_shareposition_properties");
  $(e).find(".itext").val(""),
    $(e).find("#share_position_active").prop("checked", !0),
    $(e).find("#share_position_expire").prop("checked", !1),
    $(e).find("#share_position_delete").prop("checked", !1),
    $(e).find("#share_position_send_email").prop("checked", !1),
    $(e).find("#share_position_send_sms").prop("checked", !1),
    $(e)
      .find("#button_copy")
      .unbind("click")
      .click(function () {
        var t = document.getElementById("shareurl");
        t.select(),
          t.setSelectionRange(0, 99999),
          document.execCommand("copy"),
          showMessage("succ", JS_SHARE_POSITION, JS_SHARE_COPY_SUCCESS);
      });
}
function sharePositionFill() {
  var t = $("#share_position_assets");
  t.empty();
  var e = getGroup4Flags();
  for (var a in e) {
    var i = a,
      o = e[a];
    $item = $("<optgroup label='" + i + "'></optgroup>").appendTo(t);
    for (var n = 0; n < o.length; n++)
      ($it = $("<option></option>").appendTo($item)),
        $it.attr("value", getIdByFlag(o[n])),
        $it.text(o[n]);
  }
  t.multiselect({
    columns: 3,
    placeholder: JS_SHARE_POSITION_SELECT_ASSETS,
    texts: { selectedOptions: JS_SELECTED },
    searchOptions: { default: "Search States" },
    selectAll: !0,
    search: !0,
    maxPlaceholderWidth: 175,
    maxHeight: 230,
    minHeight: 230,
    selectGroup: !0,
  }),
    t.val(""),
    t.trigger("chosen:updated"),
    t.multiselect("reload");
}
function dlgSharePositionInfo(state, keyid, shareid) {
  if (2 == state) {
    showLoading(!0, null, 3);
    var timer = setTimeout("showLoading(false,null,3);", requestTimeout);
    try {
      $.post(
        "share.position.ajax.php",
        { type: 2, shid: shareid },
        function (data) {
          clearTimeout(timer);
          var WP = window.parent;
          showLoading(!1, null, 3);
          var json = eval("(" + data + ")"),
            jo = json[0],
            Wnd = $("#dlg_shareposition_properties");
          showSharePositionDlg(state, keyid, shareid),
            $(Wnd)
              .find("#share_position_active")
              .prop("checked", 1 == jo.sa),
            $(Wnd).find("#share_position_name").val(jo.sn),
            null != jo.oids &&
              ($("#share_position_assets").val(jo.oids.split(",")),
              $("#share_position_assets").multiselect("reload")),
            $(Wnd).find("#share_position_email").val(jo.e),
            $(Wnd).find("#share_position_phone").val(jo.p),
            $(Wnd)
              .find("#share_position_expire")
              .prop("checked", 1 == jo.ee),
            $(Wnd)
              .find("#share_position_delete")
              .prop("checked", 1 == jo.ed),
            $(Wnd)
              .find("#share_position_send_email")
              .prop("checked", 1 == jo.enm),
            $(Wnd)
              .find("#share_position_send_sms")
              .prop("checked", 1 == jo.ens),
            $(Wnd).find("#shareexpired").val(jo.et),
            $(Wnd)
              .find("#shareurl")
              .val(
                window.location.protocol +
                  "//" +
                  window.location.host +
                  "/share.login.ajax.php?token=" +
                  jo.tn
              );
        }
      );
    } catch (t) {
      showLoading(!1, null, 3);
    }
  } else if (3 == state) {
    var WP = window.parent,
      $dlg = $("#dlg_delconfirm");
    $dlg.css("display", "block"),
      $dlg.css("z-index", "1020"),
      $dlg.css(
        "top",
        Math.round(document.body.clientHeight / 2 - ($dlg.height() / 3) * 2) +
          "px"
      ),
      $dlg.css(
        "left",
        Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
      ),
      $dlg.append("<span id='close' class='dialog_cancel'></span>"),
      $("body").append("<div class='modalmask_level3'></div>"),
      $dlg.find("#close").click(function () {
        $dlg.find("#button_ok").unbind("click"),
          $dlg.css("display", "none"),
          $(this).remove(),
          $(".modalmask_level3").remove();
      }),
      $dlg.find("#button_cancel").click(function () {
        $dlg.find("#button_ok").unbind("click"),
          $dlg.css("display", "none"),
          $dlg.find("#close").remove(),
          $(".modalmask_level3").remove();
      }),
      $dlg.find("#button_ok").click(function () {
        $(this).unbind("click"),
          $dlg.css("display", "none"),
          showLoading(!0, null, 3);
        var timer = setTimeout("showLoading(false,null,3);", requestTimeout);
        try {
          $.post(
            "share.position.ajax.php",
            { type: 3, state: state, shid: shareid },
            function (data) {
              clearTimeout(timer), showLoading(!1, null, 3);
              var result = eval("(" + data + ")");
              if ("ok" == result.status) {
                var $td = $(
                    "#share_position_list tbody tr td[shid=" + shareid + "]"
                  ),
                  delIdex = parseInt(
                    $td.parent().find("td:first-child").text()
                  ),
                  $trs = $("#share_position_list tbody tr");
                $.each($trs, function (t, e) {
                  var a = parseInt($(e).find("td:first-child").text());
                  delIdex < a &&
                    $(e)
                      .find("td:first-child")
                      .text(a - 1);
                }),
                  $td.parent().remove(),
                  mgrshare_position_array_name.splice(
                    jQuery.inArray(
                      $td.parent().find("td:eq(1)").text(),
                      mgrshare_position_array_name
                    ),
                    1
                  ),
                  $("#mgrshare_position_cond")
                    .focus(function () {
                      $(this).autocomplete("search", $(this).val());
                    })
                    .autocomplete({
                      source: mgrshare_position_array_name,
                      minLength:
                        mgrshare_position_array_name.length < 2e3 ? 0 : 2,
                      max: 10,
                      scroll: !0,
                    }),
                  showMessage("succ", JS_SHARE_POSITION, JS_DELETE_SUCC);
              } else
                -20 == result.error
                  ? showMessage("stop", JS_SHARE_POSITION, JS_NO_PERMISSION)
                  : showMessage("stop", JS_SHARE_POSITION, JS_DELETE_FAIL);
            }
          );
        } catch (t) {
          showLoading(!1, null, 3);
        }
      });
  }
}
function showSharePositionDlg(t, e, a) {
  var i = $("#dlg_shareposition_properties");
  $(i).css("z-index", "1012"),
    $(i).css("display", "block"),
    $("body").append("<div class='modalmask_level2'></div>"),
    $(i).append("<span id='close' class='dialog_cancel'></span>"),
    $(i)
      .find("#close")
      .click(function () {
        $(i).css("display", "none"),
          $(this).remove(),
          $(".modalmask_level2").remove();
      }),
    $(i)
      .find("#button_cancel")
      .click(function () {
        $(i).css("display", "none"),
          $(i).find("#close").remove(),
          $(".modalmask_level2").remove();
      }),
    $(i).css(
      "top",
      Math.round(document.body.clientHeight / 2 - ($dlg.height() / 3) * 2) +
        "px"
    ),
    $(i).css(
      "left",
      Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
    ),
    $(i)
      .find("#button_ok")
      .unbind("click")
      .click(function () {
        checkSharePositionDlg() && saveSharePosition(t, e, a);
      });
}
function checkSharePositionDlg() {
  var t = $("#dlg_shareposition_properties");
  $(t)
    .find(".itext, .itime")
    .each(function () {
      $(this).removeClass("invalidbox");
    });
  var e = !0;
  return (
    $(t)
      .find(".must")
      .each(function () {
        "" ==
        $(this)
          .val()
          .replace(/(^\s*)|(\s*$)/g, "")
          ? ($(this).addClass("invalidbox").focus(), (e = !1))
          : $(this).removeClass("invalidbox");
      }),
    $(t)
      .find("#share_position_assets")
      .each(function () {
        var t = $(this).val();
        null == t || 0 == t.length
          ? ($(this).addClass("invalidbox").focus(), (e = !1))
          : $(this).removeClass("invalidbox");
      }),
    e
  );
}
function saveSharePosition(state, keyid, shareid) {
  var WP = window.parent,
    Wind = $("#dlg_shareposition_properties");
  showLoading(!0, null, 3);
  var timer = setTimeout("showLoading(false,null,3)", requestTimeout),
    req = {
      type: 3,
      state: state,
      sn: $(Wind).find("#share_position_name").val(),
      sa: $(Wind).find("#share_position_active").prop("checked") ? 1 : 0,
      oids: $(Wind).find("#share_position_assets").val().join(),
      e: $(Wind).find("#share_position_email").val(),
      p: $(Wind).find("#share_position_phone").val(),
      ee: $(Wind).find("#share_position_expire").prop("checked") ? 1 : 0,
      et: $(Wind).find("#shareexpired").val(),
      ed: $(Wind).find("#share_position_delete").prop("checked") ? 1 : 0,
      enm: $(Wind).find("#share_position_send_email").prop("checked") ? 1 : 0,
      ens: $(Wind).find("#share_position_send_sms").prop("checked") ? 1 : 0,
      shid: shareid,
    };
  try {
    $.post("share.position.ajax.php", req, function (data) {
      clearTimeout(timer), showLoading(!1, null, 3);
      var result = eval("(" + data + ")");
      if (null != result && "none" != result && "ok" == result.status)
        if (2 == state) {
          var str = "#share_position_list tbody tr td[shid='" + req.shid + "']",
            $td = $(str);
          if ($td.length > 0) {
            var $tr = $td.parent();
            mgrshare_position_array_name.splice(
              $.inArray(
                $tr.find("td:eq(1)").text(),
                mgrshare_position_array_name
              ),
              1
            ),
              $tr.find("td:eq(1)").text(req.sn).attr("sn", req.sn),
              $tr.find("td:eq(2)").text(req.e),
              $tr.find("td:eq(3)").text(req.p);
            var assets = req.oids.split(",").length;
            $tr.find("td:eq(4)").text(assets),
              $tr.find("td:eq(5)").attr("data-sort", req.sa),
              0 == req.sa
                ? $tr
                    .find("td:eq(5) a")
                    .removeClass("state_enable")
                    .addClass("state_disable")
                : $tr
                    .find("td:eq(5) a")
                    .removeClass("state_disable")
                    .addClass("state_enable"),
              1 == req.ee
                ? $tr
                    .find("td:eq(6)")
                    .text(
                      null == req.et || 0 == req.et.length
                        ? req.et
                        : $.format.date(req.et, JS_DEFAULT_DATETIME_fmt_JS)
                    )
                    .attr(
                      "data-sort",
                      null == req.et || 0 == req.et.length
                        ? req.et
                        : newDate(req.et).getTime()
                    )
                : $tr.find("td:eq(6)").text(""),
              mgrshare_position_array_name.push(req.sn),
              "1" == $("#mgrshare_position_item").val() &&
                $("#mgrshare_position_cond")
                  .focus(function () {
                    $(this).autocomplete("search", $(this).val());
                  })
                  .autocomplete({
                    source: mgrshare_position_array_name,
                    minLength:
                      mgrshare_position_array_name.length < 2e3 ? 0 : 2,
                    max: 10,
                    scroll: !0,
                  }),
              void 0 !== req.en &&
                locate_table("#share_position_list", "sn", req.sn, !0),
              showMessage("succ", JS_SHARE_POSITION, JS_UPDATE_SUCC);
          }
        } else {
          $(Wind)
            .find("#shareurl")
            .val(
              window.location.protocol +
                "//" +
                window.location.host +
                "/share.login.ajax.php?token=" +
                result.token
            );
          var $td = $("#share_position_list tbody tr td[sn='" + req.sn + "']");
          if ($td.length > 0) {
            var delIdex = parseInt($td.parent().find("td:first-child").text()),
              $trs = $("#share_position_list tbody tr");
            $.each($trs, function (t, e) {
              var a = parseInt($(e).find("td:first-child").text());
              delIdex < a &&
                $(e)
                  .find("td:first-child")
                  .text(a - 1);
            }),
              $td.parent().remove(),
              mgrshare_position_array_name.splice(
                jQuery.inArray(
                  $td.parent().find("td:eq(1)").text(),
                  mgrshare_position_array_name
                ),
                1
              );
          }
          var $tbody = $("#share_position_list tbody");
          0 == $tbody.length &&
            ($tbody = $("<tbody></tbody>").appendTo($("#share_position_list"))),
            mgrshare_position_array_name.push(req.en);
          var $tr = $("<tr></tr>").appendTo($tbody);
          $("<td></td>")
            .text($tbody.find("tr").size())
            .attr("shid", result.shid)
            .appendTo($tr),
            $("<td></td>").text(req.sn).attr("sn", req.sn).appendTo($tr),
            $("<td></td>").text(req.e).appendTo($tr),
            $("<td></td>").text(req.p).appendTo($tr);
          var assets = req.oids.split(",").length;
          if (($("<td></td>").text(assets).appendTo($tr), 0 == req.sa)) {
            $td = $("<td data-sort=" + req.sa + "></td>").appendTo($tr);
            var str = "<a style='padding-left: 20px; cursor: default;'></a>";
            $(str).attr("href", "#").addClass("state_disable").appendTo($td);
          } else {
            $td = $("<td data-sort=" + req.sa + "></td>").appendTo($tr);
            var str = "<a style='padding-left: 20px; cursor: default;'></a>";
            $(str).attr("href", "#").addClass("state_enable").appendTo($td);
          }
          1 == req.ee
            ? $(
                "<td data-sort=" +
                  (null == req.et || 0 == req.et.length
                    ? req.et
                    : newDate(req.et).getTime()) +
                  "></td>"
              )
                .text(
                  null == req.et || 0 == req.et.length
                    ? req.et
                    : $.format.date(req.et, JS_DEFAULT_DATETIME_fmt_JS)
                )
                .appendTo($tr)
            : $("<td></td>").text("").appendTo($tr),
            ($td = $("<td></td>").appendTo($tr));
          var str =
            "<a style='padding-left: 20px;' onclick='sharePositionView(2," +
            keyid +
            "," +
            result.shid +
            ")'></a>";
          $(str).attr("href", "#").addClass("operate_edit").appendTo($td),
            (str =
              "<a style='padding-left: 20px;' onclick='sharePositionView(3," +
              keyid +
              "," +
              result.shid +
              ")'></a>"),
            $(str).attr("href", "#").addClass("operate_delete").appendTo($td),
            "1" == $("#mgrshare_position_item").val() &&
              $("#mgrshare_position_cond")
                .focus(function () {
                  $(this).autocomplete("search", $(this).val());
                })
                .autocomplete({
                  source: mgrshare_position_array_name,
                  minLength: mgrshare_position_array_name.length < 2e3 ? 0 : 2,
                  max: 10,
                  scroll: !0,
                }),
            void 0 !== req.en &&
              locate_table("#share_position_list", "sn", req.sn, !0),
            showMessage("succ", JS_SHARE_POSITION, JS_SAVE_SUCC);
        }
      else
        -20 == result.error
          ? showMessage("stop", JS_SHARE_POSITION, JS_NO_PERMISSION)
          : showMessage("stop", JS_SHARE_POSITION, JS_SHARE_FAIL);
    });
  } catch (t) {
    showLoading(!1, null, 3),
      showMessage("stop", JS_SHARE_POSITION, JS_SHARE_FAIL);
  }
}
function showTaskInfo(tname) {
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.post("manage.task.ajax.php", { type: 13, tname: tname }, function (data) {
      clearTimeout(timer), showLoading(!1);
      var jo = eval("(" + data + ")");
      if (
        null != jo &&
        void 0 !== jo &&
        null != jo.jsons &&
        void 0 !== jo.jsons &&
        null != jo.jsone &&
        void 0 !== jo.jsone
      ) {
        $("#maptools #ed_task").addClass("tool_active"),
          $("#maptools #ed_task").css({ opacity: 1 }),
          $("#maptools #ed_task")
            .attr("tid", jo.jsons[0].tid)
            .attr("oid", jo.jsons[0].oid);
        var waypoints = [],
          startLocation = [],
          endLocation = [],
          message = [];
        if (1 == jo.jsons[0].at) {
          var apts = jo.jsons[0].ap.split(",");
          startLocation = [apts[0], apts[1]];
        } else if (2 == jo.jsons[0].at) {
          var apts = jo.jsons[0].ap.split(";");
          startLocation = ext.RectangleCenter(
            parseFloat(apts[0].split(",")[0]),
            parseFloat(apts[0].split(",")[1]),
            parseFloat(apts[1].split(",")[0]),
            parseFloat(apts[1].split(",")[1])
          );
        } else if (3 == jo.jsons[0].at) {
          for (
            var route = [], points = jo.jsons[0].ap.split(";"), i = 0;
            i < points.length;
            i++
          ) {
            var point = [points[i].split(",")[0], points[i].split(",")[1]];
            route.push(point);
          }
          startLocation = ext.PolygonCenter(route);
        } else if (4 == jo.jsons[0].at) {
          var apts = jo.jsons[0].ap.split(",");
          startLocation = [apts[0], apts[1]];
        } else if (5 == jo.jsons[0].at) {
          for (
            var route = [], points = jo.jsons[0].ap.split(";"), i = 0;
            i < points.length;
            i++
          ) {
            var point = [points[i].split(",")[0], points[i].split(",")[1]];
            route.push(point);
          }
          startLocation = ext.PolylineCenter(route);
        }
        if (
          (message.push(
            JS_TASK_START +
              "</br>(" +
              jo.jsons[0].sf +
              " - " +
              jo.jsons[0].st +
              ")"
          ),
          1 == jo.jsone[0].at)
        ) {
          var apts = jo.jsone[0].ap.split(",");
          endLocation = [apts[0], apts[1]];
        } else if (2 == jo.jsone[0].at) {
          var apts = jo.jsone[0].ap.split(";");
          endLocation = ext.RectangleCenter(
            parseFloat(apts[0].split(",")[0]),
            parseFloat(apts[0].split(",")[1]),
            parseFloat(apts[1].split(",")[0]),
            parseFloat(apts[1].split(",")[1])
          );
        } else if (3 == jo.jsone[0].at) {
          for (
            var route = [], points = jo.jsone[0].ap.split(";"), i = 0;
            i < points.length;
            i++
          ) {
            var point = [points[i].split(",")[0], points[i].split(",")[1]];
            route.push(point);
          }
          endLocation = ext.PolygonCenter(route);
        } else if (4 == jo.jsone[0].at) {
          var apts = jo.jsone[0].ap.split(",");
          endLocation = [apts[0], apts[1]];
        } else if (5 == jo.jsone[0].at) {
          for (
            var route = [], points = jo.jsone[0].ap.split(";"), i = 0;
            i < points.length;
            i++
          ) {
            var point = [points[i].split(",")[0], points[i].split(",")[1]];
            route.push(point);
          }
          endLocation = ext.PolylineCenter(route);
        }
        message.push(
          JS_TASK_END + "</br>(" + jo.jsone[0].ef + " - " + jo.jsone[0].et + ")"
        ),
          waypoints.push(startLocation),
          waypoints.push(endLocation),
          map.ActiveTaskPathTool(!1),
          map.ActiveTaskPathTool(!0, waypoints, message);
      } else showMessage("info", JS_TASK_INFO, JS_NO_TASK);
    });
  } catch (t) {
    showLoading(!1), showMessage("info", JS_TASK_INFO, JS_NO_TASK);
  }
}
function disableCurrentTask() {
  var opts = {
    type: 14,
    state: 4,
    tid: $("#maptools #ed_task").attr("tid"),
    oid: $("#maptools #ed_task").attr("oid"),
  };
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.post("manage.task.ajax.php", opts, function (data) {
      clearTimeout(timer), showLoading(!1);
      var result = eval("(" + data + ")");
      "ok" == result.status
        ? ($("#maptools #ed_task").removeClass("tool_active"),
          $("#maptools #ed_task").css({ opacity: 0.5 }),
          $("#maptools #ed_task").removeAttr("tid").removeAttr("oid"),
          map.ActiveTaskPathTool(!1),
          showMessage("succ", JS_TASK_INFO, JS_DISABLE_TASK_SUCC))
        : -20 == result.error
        ? showMessage("stop", JS_TASK_INFO, JS_NO_PERMISSION)
        : showMessage("stop", JS_TASK_INFO, JS_DISABLE_TASK_FAIL);
    });
  } catch (t) {
    showLoading(!1), showMessage("info", JS_TASK_INFO, JS_NO_TASK);
  }
}
function dlgDeviceInfo(keyid) {
  showLoading(!0);
  var timer = setTimeout("showLoading(false,true)", requestTimeout);
  try {
    $.get("devinfo.ajax.php", { objid: keyid }, function (data) {
      clearTimeout(timer), showLoading(!1);
      var jo = eval("(" + data + ")");
      ($dlg = $("#dlg_objinfo")),
        $dlg.find(".itext,icontent").val(""),
        $("#oflag").removeClass("invalidbox"),
        $dlg.css("display", "block"),
        $("body").append("<div class='modalmask'></div>"),
        $dlg.append("<span id='idclose' class='dialog_cancel'></span>"),
        $dlg.find("#idclose").click(function () {
          $dlg.css("display", "none"),
            $(this).remove(),
            $(".modalmask").remove();
        }),
        $dlg.find("#button_cancel").click(function () {
          $dlg.css("display", "none"),
            $dlg.find("#idclose").remove(),
            $(".modalmask").remove();
        }),
        $dlg
          .find("#button_ok")
          .unbind("click")
          .click(function () {
            var mustok = !0;
            if (
              ("" == $("#oflag").val() || null == $("#oflag").val()
                ? ($("#oflag").addClass("invalidbox"), (mustok = !1))
                : $("#oflag").removeClass("invalidbox"),
              mustok)
            ) {
              $(this).unbind("click");
              var req = {
                style: "post",
                objid: keyid,
                oflag: $dlg.find("#oflag").val(),
                okind: parseInt(iconSelect.getSelectedValue()),
                custphone: $dlg.find("#custphone").val(),
                remark: $dlg.find("#remark").val(),
              };
              showLoading(!0);
              try {
                (timer = setTimeout("showLoading(false,true)", requestTimeout)),
                  $.get("devinfo.ajax.php", req, function (data) {
                    if (
                      (clearTimeout(timer),
                      showLoading(!1),
                      data.indexOf("ok") >= 0)
                    )
                      $dlg.css("display", "none"),
                        $dlg.find("#idclose").remove(),
                        $(".modalmask").remove(),
                        showMessage("succ", JS_DEVICE_INFO, JS_UPDATE_SUCC);
                    else {
                      var result = eval("(" + data + ")");
                      -1 == result.error
                        ? ($("#oflag").addClass("invalidbox").focus(),
                          showMessage("stop", JS_DEVICE_INFO, JS_ERROR_TIP))
                        : -20 == result.error &&
                          showMessage("stop", JS_DEVICE_INFO, JS_NO_PERMISSION);
                    }
                  });
              } catch (t) {
                error(showLoading(!1));
              }
            }
          }),
        $dlg.css(
          "top",
          Math.round(document.body.clientHeight / 2 - ($dlg.height() / 3) * 2) +
            "px"
        ),
        $dlg.css(
          "left",
          Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
        ),
        $dlg.find("#oflag").val(jo.oflag),
        $dlg.find("#dtype").val(jo.dtype),
        $dlg.find("#devno").val(jo.devno),
        $dlg.find("#simno").val(jo.simno),
        $dlg.find("#itime").val($.format.date(jo.itime, JS_DEFAULT_DATE_FMT)),
        $dlg.find("#etime").val($.format.date(jo.etime, JS_DEFAULT_DATE_FMT)),
        $dlg.find("#custname").val(jo.custname),
        $dlg.find("#custphone").val(jo.custphone),
        $dlg.find("#drvname").val(jo.drvname),
        $dlg.find("#drvphone").val(jo.drvphone),
        iconSelect.setSelectedIndex(jo.okind - 1),
        $dlg.find("#remark").val(jo.remark);
    });
  } catch (t) {
    showLoading(!1);
  }
}
function showDeviceInfo(t) {
  $("#mnuOperat").hide(),
    (null != t && null != typeof t) || (t = menu_operator_id),
    dlgDeviceInfo(t);
}
function initCmdParams(t, e) {
  $("#cmderror").css("display", "none"), $("#cmdparam").empty();
  for (
    var i = $("<tbody></tbody>").appendTo($("#cmdparam")), o = 0, n = 0;
    n < protocolCmd.length;
    n++
  )
    if (protocolCmd[n].pid == t && protocolCmd[n].cid == e) {
      var r = $("<tr></tr>").appendTo(i),
        s = $("<td></td>").appendTo(r);
      $("<label></label>")
        .removeClass()
        .addClass("edit")
        .text(
          1 == protocolCmd[n].pm ? "*" + protocolCmd[n].pn : protocolCmd[n].pn
        )
        .appendTo(s);
      var l,
        d = $("<td></td>").appendTo(r);
      if (0 == protocolCmd[n].vt) {
        if (
          ((l = $("<select></select>")
            .addClass("iselect")
            .addClass("enablebox")
            .width(150)
            .appendTo(d)),
          d.attr("ptype", 0),
          null != protocolCmd[n].dv && protocolCmd[n].dv.length > 0)
        ) {
          var p = protocolCmd[n].dv.split(";"),
            c = parseInt(p[0].split("=")[1]);
          for (a = 0; a < p.length; a++) {
            var h = p[a].split("=");
            2 == h.length &&
              (($item = $("<option></option>").appendTo(l)),
              $item.text(h[0]),
              0 == c
                ? $item.attr("value", h[1])
                : $item.attr("value", h[1] - 1));
          }
        }
      } else
        4 == protocolCmd[n].vt
          ? ((l = $(
              "<div><input type='file' style='display:none' onchange='importFile(this);'/><input type='button' id='import' value='" +
                protocolCmd[n].h +
                "' onclick='loadFile(this);'/></div>"
            ).appendTo(d)),
            d.attr("ptype", 4))
          : "%DATE%" == protocolCmd[n].dv
          ? ((l = $("<input readonly='true' style='margin-left: 4px;'></input>")
              .removeClass()
              .addClass("itime")
              .addClass("enablebox")
              .width(145)
              .appendTo(d)),
            d.attr("ptype", 1),
            l.datepicker({
              dateFormat: "yy-mm-dd",
              changeMonth: !0,
              changeYear: !0,
              yearRange: "-20:+20",
            }))
          : "%TIME%" == protocolCmd[n].dv
          ? ((l = $("<input readonly='true' style='margin-left: 4px;></input>")
              .removeClass()
              .addClass("itime")
              .addClass("enablebox")
              .width(145)
              .appendTo(d)),
            d.attr("ptype", 2),
            l.timepicker({ timeFormat: "HH:mm" }))
          : ((l = $("<input style='margin-left: 4px;'></input>")
              .removeClass()
              .addClass("itext")
              .addClass("enablebox")
              .width(145)
              .appendTo(d)),
            d.attr("ptype", 3),
            null != protocolCmd[n].dv &&
              0 != protocolCmd[n].dv.indexOf("%") &&
              l.val(protocolCmd[n].dv));
      if (
        (1 == protocolCmd[n].pm && l.addClass("must"),
        l.attr("valuetype", protocolCmd[n].vt),
        l.attr("maxlen", protocolCmd[n].maxl),
        l.attr("minvalue", protocolCmd[n].minv),
        l.attr("maxvalue", protocolCmd[n].maxv),
        l.attr("limit", protocolCmd[n].l),
        null != protocolCmd[n].units && protocolCmd[n].units.length > 0)
      ) {
        var u = $("<td></td>").appendTo(r);
        $("<label></label>")
          .removeClass()
          .addClass("edit")
          .text(protocolCmd[n].units)
          .appendTo(u);
      }
      o++;
    }
  if (0 == o) $("<td></td>").text(JS_NO_NEED_PARAM).appendTo(i);
}
function loadFile(t) {
  $(t).prev().click();
}
function importFile(t) {
  var e = t.files[0],
    a = e.name,
    i = e.size;
  console.log("file:" + a + ",size：" + i);
  var o = new FileReader();
  o.readAsArrayBuffer(e),
    (o.onloadend = function (e) {
      var a = e.target.result,
        o = new Uint8Array(a, 0, i);
      console.log(buf2hex(o)),
        $(t).parent().attr("file", buf2hex(o)),
        $(t).parent().parent().css("background-color", "white");
    });
}
function buf2hex(t) {
  return Array.prototype.map
    .call(new Uint8Array(t), function (t) {
      return ("00" + t.toString(16)).slice(-2);
    })
    .join("");
}
function showSendCmd(t) {
  ($("#mnuOperat").hide(), null != typeCmd && 0 != typeCmd.length)
    ? ((null != t && null != typeof t) || (t = menu_operator_id),
      dlgSendCmd(t, getTypeById(t)))
    : showMessage("info", JS_CMD_SENDCMD, JS_NO_COMMAND);
}
function dlgSendCmd(keyid, typeid) {
  var jo,
    $ul = $("#cmdul");
  $ul.empty(), $("#cmdparam").empty(), $("#cmderror").css("display", "none");
  for (var i = 0; i < typeCmd.length; i++)
    if (typeCmd[i].tid == typeid) {
      jo = typeCmd[i];
      var $li = $("<li></li>").attr("cmdid", typeCmd[i].cid).appendTo($ul),
        $a = $(
          '<a onmousedown="initCmdParams(' + jo.pid + "," + jo.cid + ')"></a>'
        )
          .text(typeCmd[i].cn)
          .appendTo($li);
    }
  var $dlg = $("#dlg_sendcmd");
  $dlg.css("display", "block"),
    $("body").append("<div class='modalmask'></div>"),
    $dlg.append("<span id='close' class='dialog_cancel'></span>"),
    $dlg.find("#close").click(function () {
      $dlg.css("display", "none"), $(this).remove(), $(".modalmask").remove();
    }),
    $dlg.find("#button_cancel").click(function () {
      $dlg.css("display", "none"),
        $dlg.find("#close").remove(),
        $(".modalmask").remove();
    }),
    $dlg
      .find("#button_ok")
      .unbind("click")
      .click(function () {
        var matchArray;
        if (null != $(".dialog ul li.dlg_active").attr("cmdid")) {
          var mustok = !0;
          if (
            ($("#cmdparam")
              .find(".must")
              .each(function () {
                ("" != $(this).val() && null != $(this).val()) ||
                4 == $(this).parent().attr("ptype")
                  ? $(this).css("background-color", "white")
                  : ($(this).css("background-color", "red"), (mustok = !1));
              }),
            mustok)
          ) {
            var rangeok = !0;
            if (
              ($("#cmdparam")
                .find("[valuetype=1],[valuetype=2],[valuetype=3],[valuetype=9]")
                .each(function () {
                  var t = $(this).val();
                  if ("" != t) {
                    if (null == (matchArray = t.match(/^[+-]?\d+(\.\d+)?$/)))
                      return (
                        $(this).css("background-color", "red"),
                        $("#cmderror")
                          .css("display", "block")
                          .css("color", "red")
                          .text(JS_RANGE_ERROR + $(this).attr("limit")),
                        (rangeok = !1),
                        !1
                      );
                    $(this).css("background-color", "white");
                  }
                  if (
                    null != $(this).attr("limit") &&
                    $(this).attr("limit").indexOf("..") > 0
                  ) {
                    var e = parseFloat($(this).attr("limit").split("..")[0]),
                      a = parseFloat($(this).attr("limit").split("..")[1]);
                    if (parseFloat(t) < e || parseFloat(t) > a)
                      return (
                        $(this).css("background-color", "red"),
                        $("#cmderror")
                          .css("display", "block")
                          .css("color", "red")
                          .text(JS_RANGE_ERROR + $(this).attr("limit")),
                        (rangeok = !1),
                        !1
                      );
                  }
                }),
              rangeok)
            ) {
              var lengthok = !0;
              $("#cmdparam")
                .find("[valuetype=5]")
                .each(function () {
                  var t = $(this).val(),
                    e = parseInt($(this).attr("maxlen"));
                  if (t.length > e)
                    return (
                      $(this).css("background-color", "red"),
                      $("#cmderror")
                        .css("display", "block")
                        .css("color", "red")
                        .text(JS_LENGTH_ERROR + $(this).attr("maxlen")),
                      (lengthok = !1),
                      !1
                    );
                });
              var fileok = !0;
              if (
                ($("#cmdparam")
                  .find("[valuetype=4]")
                  .each(function () {
                    if (void 0 === $(this).attr("file"))
                      return (
                        $(this).parent().css("background-color", "red"),
                        (fileok = !1),
                        !1
                      );
                    $(this).parent().css("background-color", "white");
                  }),
                fileok)
              ) {
                $(this).unbind("click");
                var params = "";
                $("#cmdparam")
                  .find("tr")
                  .each(function () {
                    var t = $(this).children().eq(1);
                    params =
                      0 == t.attr("ptype")
                        ? params +
                          $(this).children().eq(1).find("select").val() +
                          ","
                        : 4 == t.attr("ptype")
                        ? params +
                          $(this).children().eq(1).find("div").attr("file") +
                          ","
                        : params +
                          $(this).children().eq(1).find("input").val() +
                          ",";
                  });
                var req = {
                  objid: keyid,
                  cmdid: $(".dialog ul li.dlg_active").attr("cmdid"),
                  params: params.substring(0, params.length - 1),
                };
                $dlg.css("display", "none"), showLoading(!0);
                var timer = setTimeout(
                  "showLoading(false,true)",
                  requestTimeout
                );
                try {
                  $.get("command.ajax.php", req, function (data) {
                    if (
                      (clearTimeout(timer),
                      showLoading(!1),
                      data.indexOf("ok") >= 0)
                    )
                      $dlg.find("#close").remove(),
                        $(".modalmask").remove(),
                        showMessage("succ", JS_CMD_SENDCMD, JS_CMD_SEND_SUCC);
                    else {
                      var result = eval("(" + data + ")");
                      -20 == result.error
                        ? showMessage("stop", JS_CMD_SENDCMD, JS_NO_PERMISSION)
                        : alert(data);
                    }
                  });
                } catch (t) {
                  error(showLoading(!1));
                }
              }
            }
          }
        } else $("#cmderror").css("display", "block").css("color", "red").text(JS_SELECT_ONE_CMD);
      }),
    $(".dialog ul li").click(function () {
      $(".dlg_active").removeClass("dlg_active"),
        $(this).addClass("dlg_active");
    }),
    $dlg.css(
      "top",
      Math.round(document.body.clientHeight / 2 - $dlg.height() / 2) + "px"
    ),
    $dlg.css(
      "left",
      Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
    );
}
function showStreetView() {
  $("#mnuOperat").hide();
  var t = menu_operator_id,
    e = map.GetMarker(t);
  openStreetView(e.properties.x, e.properties.y, e.properties.dir);
}
function openStreetView(t, e, a) {
  window.open(
    JS_GOOGLE_MAP_BASE_LINK +
      "/maps?q&layer=c&hl=" +
      JS_CURRENT_LANG +
      "&cbll=" +
      e / 1e6 +
      "," +
      t / 1e6 +
      "&cbp=11," +
      a +
      ",0,0,0",
    "_blank"
  );
}
function showObjChart() {
  ($dlg = $("#dlg_objstatechart")),
    "none" == $dlg.css("display") &&
      ($("body").append("<div class='modalmask'></div>"),
      $dlg.css("display", "block"),
      $dlg.append("<span id='close' class='dialog_cancel'></span>"),
      $dlg.find("#close").click(function () {
        $dlg.css("display", "none"), $(this).remove(), $(".modalmask").remove();
      }),
      $dlg.find("#button_ok").click(function () {
        $dlg.css("display", "none"),
          $dlg.find("#close").remove(),
          $(".modalmask").remove();
      }),
      $dlg.css(
        "top",
        Math.round(document.body.clientHeight / 2 - $dlg.height() / 2) + "px"
      ),
      $dlg.css(
        "left",
        Math.round(document.body.clientWidth / 2 - $dlg.width() / 2) + "px"
      ));
  var t = getMovingStopCarNumber(),
    e = getTopMileageEngine();
  createObjStateBar(
    getAllNumber(),
    getOnlineNumber(),
    getOfflineNumber(),
    getAlarmCarNumber(),
    getExpiredNumber(),
    t[0],
    t[1],
    t[2],
    t[3],
    e[0],
    e[1],
    e[2],
    e[3],
    getExpireObjByDays()
  );
}
function updateOne(t) {
  var e = t.attr("s"),
    a = t.attr("i"),
    i = t.find("td:eq(6)").attr("a"),
    o = t.attr("st"),
    n = t.attr("sval"),
    r = t.find("td:eq(7)").attr("takn"),
    s = t.find("td:eq(8)").attr("takp"),
    l = t.hasClass("active"),
    d = t.find("td:eq(2)").attr("io"),
    p = t.attr("ic"),
    c = t.find("td:eq(2)").attr("dn");
  if (
    (t
      .attr("class", "normal")
      .find("td:eq(2)")
      .css({
        background: "url(img/icons/icon_" + a + ".svg) no-repeat 5px center",
        "padding-left": "30px",
        "background-size": "20px 20px",
      }),
    0 == i
      ? (t.css("background-color", ""), t.next().css("background-color", ""))
      : (t.css("background-color", p), t.next().css("background-color", p)),
    l && (t.addClass("active"), t.next().addClass("active")),
    t.find("td:eq(3)").removeClass().removeAttr("title"),
    t.find("td:eq(5)").removeClass().removeAttr("title"),
    t.find("td:eq(6)").removeClass().removeAttr("title"),
    t.find("td:eq(7)").removeClass().removeAttr("title"),
    t.find("td:eq(8)").removeClass().removeAttr("title"),
    t.find("td:eq(9)").removeClass().removeAttr("title"),
    "0" == e)
  )
    t.find("td:eq(4)")
      .attr("class", "offline")
      .attr("title", JS_TIP_OBJ_OFFLINE);
  else if (
    (t
      .find("td:eq(4)")
      .attr("class", "online")
      .attr("title", JS_TIP_OBJ_ONLINE),
    null != typeof o && null != o && o.indexOf("3005") >= 0)
  )
    t.find("td:eq(3)").attr("class", "engine_on").attr("title", JS_ENGINE_ON);
  else {
    window.parent;
    null != typeof o &&
    null != o &&
    o.indexOf("3006") >= 0 &&
    null != n &&
    n > 0
      ? t
          .find("td:eq(3)")
          .attr("class", "engine_off")
          .attr("title", JS_ENGINE_OFF)
      : t.find("td:eq(3)").attr("class", "parking").attr("title", JS_PARKING);
  }
  t.find("td:eq(9)").attr("class", "menu").attr("title", JS_ASSET_CONTROL);
  var h = getIdValue("62:", d, !0);
  null != typeof h && null != h
    ? "0" == h
      ? t.find("td:eq(6)").attr("class", "gpsvalid").attr("title", JS_GPS_VALID)
      : t
          .find("td:eq(6)")
          .attr("class", "cellvalid")
          .attr("title", JS_LBS_VALID)
    : null != typeof o && o.indexOf("200E") >= 0
    ? t.find("td:eq(6)").attr("class", "gpsvalid").attr("title", JS_GPS_VALID)
    : t
        .find("td:eq(6)")
        .attr("class", "invalid")
        .attr("title", JS_LOCATION_INVALID),
    i > 0 &&
      t
        .find("td:eq(7)")
        .attr("class", "alarm")
        .attr("title", JS_ALARM_INFO)
        .unbind("click")
        .click(function (e) {
          showAlarmInfo(t.attr("n"));
        }),
    "-1" == n
      ? t.css("text-decoration", "line-through")
      : t.css("text-decoration", "none"),
    null != r &&
      void 0 !== r &&
      t
        .find("td:eq(7)")
        .attr("class", "tasknew")
        .attr("title", JS_TASK_NEW_INFO)
        .unbind("click")
        .click(function (t) {
          showTaskInfo(r);
        }),
    null != s &&
      void 0 !== s &&
      t
        .find("td:eq(8)")
        .attr("class", "taskprocessing")
        .attr("title", JS_TASK_PROCESSING_INFO)
        .unbind("click")
        .click(function (t) {
          showTaskInfo(s);
        }),
    t
      .find("td:eq(9)")
      .unbind("click")
      .click(function (e) {
        (menu_operator_id = t.attr("n")),
          $("#mnuOperat").hide(),
          $("#mnuOperat").show();
        var a = $(document.body).height();
        a - e.pageY < 150
          ? $("#mnuOperat").css({ top: e.pageY - 150 - 50, left: e.pageX })
          : $("#mnuOperat").css({ top: e.pageY - 50, left: e.pageX });
        var i = a - $(".liHistory").offset().top;
        i < 228
          ? $(".mnuHistory").css({ top: i - 228 })
          : $(".mnuHistory").css({ top: 0 });
      }),
    $(t.find("td:eq(2)"))
      .unbind("hover")
      .hover(
        function (t) {
          var e = window.parent,
            a = $(this).attr("io");
          $("#tip_name").text($(this).text()),
            $("#tip_device_no").text($(this).attr("nc")),
            $("#tip_simcard").text($(this).attr("si")),
            $("#tip_driver").text($(this).attr("dn")),
            $("#tip_lat").text(
              ($(this).attr("y") / 1e6).toFixed(5) + String.fromCharCode(176)
            ),
            $("#tip_lng").text(
              ($(this).attr("x") / 1e6).toFixed(5) + String.fromCharCode(176)
            ),
            $("#tip_speed").text($(this).attr("sp") + " " + e.UNIT_SPEED),
            $("#tip_heading").text(
              $(this).attr("d") + String.fromCharCode(176)
            ),
            $("#tip_time").text($(this).attr("t"));
          (a = $(this).attr("io")), $(this).attr("dt");
          var i = getIdValue("A:", a);
          null != i
            ? ((i = mileageUnitConversion(i, JS_UNIT_DISTANCE)),
              $("#tip_mil").text(i + UNIT_DIST))
            : $("#tip_mil").text("---");
          var o = "---";
          null != (i = getIdValue("1E:", a)) &&
            (o = fuelUnitConversion(i, JS_UNIT_FUEL));
          var n = "---";
          null != (i = getIdValue("1F:", a)) &&
            (n = fuelUnitConversion(i, JS_UNIT_FUEL)),
            $("#tip_fuel").text(o + "," + n + UNIT_FUEL),
            null != (i = getIdValue("1:", a))
              ? $("#tip_bat").text(i + "%")
              : $("#tip_bat").text("---");
          var r = "---";
          null != (i = getIdValue("48:", a)) &&
            (r = tempUnitConversion(i, JS_UNIT_TEMPERATURE));
          var s = "---";
          null != (i = getIdValue("48:", a)) &&
            (s = tempUnitConversion(i, JS_UNIT_TEMPERATURE)),
            $("#tip_temp").text(r + "," + s + UNIT_TEMP),
            null != (i = getIdValue("1C:", a))
              ? $("#tip_passenger").text(i)
              : $("#tip_passenger").text("---"),
            null != (i = getIdValue("1D:", a))
              ? (JS_UNIT_HUMIDITY, $("#tip_humidity").text(i + UNIT_HUMIDITY))
              : $("#tip_humidity").text("---"),
            $("#devicetips").css("display", "block"),
            $("#devicetips").css({ top: t.pageY, left: t.pageX + 15 });
          var l = $(document.body).height(),
            d = $("#devicetips").offset().top + $("#devicetips").height();
          d > l &&
            $("#devicetips").css({
              top: t.pageY - (d - l + 30),
              left: t.pageX + 15,
            });
        },
        function () {
          $("#devicetips").css("display", "none");
        }
      ),
    ($tr = t.next());
  var u = getIdValue("48:", d),
    _ = "--";
  null != u && (_ = tempUnitConversion(u, JS_UNIT_TEMPERATURE));
  var m = "--";
  null != (u = getIdValue("49:", d)) &&
    (m = tempUnitConversion(u, JS_UNIT_TEMPERATURE));
  var g = (_ + "," + m + UNIT_TEMP).replace("--,", "").replace(",--", "");
  $tr.find("#temp_1").text(g);
  var f = "--";
  null != (u = getIdValue("1E:", d)) &&
    (f = fuelUnitConversion(u, JS_UNIT_FUEL));
  var v = "--";
  null != (u = getIdValue("1F:", d)) &&
    (v = fuelUnitConversion(u, JS_UNIT_FUEL));
  var x = (f + "," + v + UNIT_FUEL).replace("--,", "").replace(",--", "");
  $tr.find("#fuel_1").text(x);
  var y = "--";
  null != (u = getIdValue("3F:", d)) &&
    (y = mileageUnitConversion(u, JS_UNIT_DISTANCE)),
    $tr.find("#mil_24").text(y + UNIT_DIST);
  var T = "--";
  null != (u = getIdValue("3C:", d)) &&
    (T = speedUnitConversion(u, JS_UNIT_SPEED)),
    $tr.find("#max_speed_24").text(T + UNIT_SPEED);
  var S = "--";
  null != (u = getIdValue("3D:", d)) && (S = formatSecToStr(u)),
    $tr.find("#moving_time_24").text(S);
  var b = "--";
  null != (u = getIdValue("40:", d)) && (b = formatSecToStr(u)),
    $tr.find("#idle_time_24").text(b);
  var E = "--";
  null != (u = getIdValue("41:", d)) && (E = formatSecToStr(u)),
    $tr.find("#stop_time_24").text(E);
  var I = "--";
  null != (u = getIdValue("3E:", d)) && (I = formatSecToStr(u)),
    $tr.find("#engine_time_24").text(I);
  var w = "--";
  null != (u = getIdValue("A:", d)) &&
    (w = mileageUnitConversion(u, JS_UNIT_DISTANCE)),
    $tr.find("#total_mil").text(w + UNIT_DIST);
  var k = "--";
  null != typeof o && null != o && o.indexOf("3002") >= 0
    ? (k = JS_DOOR_CLOSE)
    : null != typeof o &&
      null != o &&
      o.indexOf("3001") >= 0 &&
      (k = JS_DOOR_OPEN),
    $tr.find("#door_state").text(k);
  var A = "--";
  null != c && c.length > 0 && (A = c),
    $tr.find("#last_driver").text(A),
    $tr.find("#temp_1").attr("class", "temp_1").attr("title", JS_TEMP),
    $tr.find("#fuel_1").attr("class", "fuel_1").attr("title", JS_FUEL),
    $tr.find("#mil_24").attr("class", "mil_24").attr("title", JS_ODOMETER_24H),
    $tr
      .find("#mil_24")
      .unbind("click")
      .click(function (e) {
        showLast24History(t.attr("n"));
        var a = t.find("td:first-child input"),
          i = t.find("td:eq(1) input");
        a.is(":checked") || a.trigger("click"),
          i.is(":checked") || i.trigger("click");
      }),
    $tr
      .find("#max_speed_24")
      .attr("class", "max_speed_24")
      .attr("title", JS_MAX_SPEED_24H),
    $tr
      .find("#moving_time_24")
      .attr("class", "moving_time_24")
      .attr("title", JS_INFO_MOVING_TIME_24H),
    $tr
      .find("#idle_time_24")
      .attr("class", "idle_time_24")
      .attr("title", JS_INFO_IDLE_TIME_24H),
    $tr
      .find("#stop_time_24")
      .attr("class", "stop_time_24")
      .attr("title", JS_INFO_STOP_TIME_24H),
    $tr
      .find("#engine_time_24")
      .attr("class", "engine_time_24")
      .attr("title", JS_INFO_ENGINE_TIME_24H),
    $tr
      .find("#total_mil")
      .attr("class", "total_mil")
      .attr("title", JS_ODOMETER),
    $tr
      .find("#door_state")
      .attr("class", "door_state")
      .attr("title", JS_DOOR_STATE),
    $tr
      .find("#last_driver")
      .attr("class", "last_driver")
      .attr("title", JS_DRIVER_NAME),
    $tr.find("td li").each(function (t, e) {
      haveInfo(t + 1)
        ? $(this).css("display", "block")
        : $(this).css("display", "none");
    });
}
function haveInfo(t) {
  if (null == JS_DEFAULT_ASSET_INFOS || 0 == JS_DEFAULT_ASSET_INFOS.length)
    return !1;
  for (
    var e = JS_DEFAULT_ASSET_INFOS.toString().split(","), a = 0;
    a < e.length;
    a++
  )
    if (t.toString() == e[a]) return !0;
  return !1;
}
function showLast24History(objid) {
  map.ClearTrack(objid), showLoading(!0);
  var timer_search = setTimeout("showLoading(false,true)", 3e4),
    param = {
      objid: objid,
      day: 0.1,
      time1: "",
      time2: "",
      stop: 0,
      event: 0,
      ptype: 1,
      btype: 1,
    };
  (events = []), (stops = []), (moves = []);
  try {
    $.get("playback.ajax.php", param, function (data) {
      clearTimeout(timer_search), showLoading(!1);
      try {
        var json = eval("(" + data + ")");
        if (null != json && void 0 !== json.error)
          showMessage("stop", JS_PLAY_TITLE, json.error, 10);
        else if (null != json && void 0 !== json.item && json.item.length > 0) {
          var hisData = json.item;
          map.DrawTrackLine(
            objid,
            hisData,
            { point: !0 },
            stops,
            !1,
            events,
            !1,
            !0,
            !1,
            moves
          );
        }
      } catch (t) {
        clearTimeout(timer_search), error(showLoading(!1));
      }
    });
  } catch (t) {
    clearTimeout(timer_search), error(showLoading(!1));
  }
}
function playAlarm() {
  var t = $("#player")[0];
  window.ActiveXObject || "ActiveXObject" in window
    ? t.play()
    : t.paused && t.play();
}
var t1,
  tlist = [];
function timerefresh() {
  clearTimeout(t1),
    $.each(tlist, function (t, e) {
      if ((updateOne(e), t >= 20)) return !1;
    }),
    tlist.splice(0, 20),
    tlist.length > 0
      ? (t1 = setTimeout("timerefresh();", 20))
      : clearTimeout(t1);
}
function showAllObj(t) {
  map.HideShowMarker(t);
  var e = $(".tree_table"),
    a = e.find("tbody tr th input.showall");
  $.each(a, function (e, a) {
    t
      ? $(this).css({ opacity: 1 }).prop("checked", !0)
      : $(this).css({ opacity: 0.5 }).prop("checked", !1);
  });
  var i = e.find("tbody tr:gt(0)");
  $.each(i, function (e, a) {
    t
      ? $(a).find("td:first-child input").prop("checked", !0)
      : (map.ClearTrack(),
        $(a).find("td:first-child input").prop("checked", !1),
        $(a).find("td:eq(1) input").prop("checked", !1));
  });
}
function updateShow() {
  var t = $(".tree_table"),
    e = t.find("tbody tr th.group");
  e.unbind("click").click(function () {
    if ($(this).is(".open")) $(this).removeClass("open").addClass("close");
    else {
      var t = $(this).parent().parent().parent().attr("id"),
        e = $(this).parent().parent().find("tr:gt(0):not(.end_state)");
      $.each(e, function (e, a) {
        var i = parseInt($(a).attr("n"));
        updateOne(GroupItem[t + "_" + i]);
      }),
        $(this).removeClass("close").addClass("open");
    }
    $(this).parent().parent().find("tr:gt(0)").toggle();
  }),
    (e = t.find("tbody tr th input.showall"))
      .unbind("click")
      .click(function () {
        if ($(this).is(":checked")) {
          $(this).css({ opacity: 1 });
          var t = $(this).parent().parent().parent().find("tr:gt(0)");
          $.each(t, function (t, e) {
            var a = parseInt($(e).attr("n"));
            map.HideShowMarker(!0, a),
              $(e).find("td:first-child input").prop("checked", !0);
            var i = findpageitems(a);
            $.each(i, function (t, e) {
              $(e).find("td:eq(0) input").prop("checked", !0);
            });
          });
        } else
          $(this).css({ opacity: 0.5 }),
            (t = $(this).parent().parent().parent().find("tr:gt(0)")),
            $.each(t, function (t, e) {
              var a = parseInt($(e).attr("n"));
              map.HideShowMarker(!1, a),
                $(e).find("td:eq(0) input").prop("checked", !1),
                $(e).find("td:eq(1) input").prop("checked", !1);
              var i = findpageitems(a);
              $.each(i, function (t, e) {
                $(e).find("td:eq(0) input").prop("checked", !1),
                  $(e).find("td:eq(1) input").prop("checked", !1);
              });
            }),
            $(this)
              .parent()
              .parent()
              .parent()
              .find("tr th input.trackall")
              .css({ opacity: 0.5 })
              .prop("checked", !1);
      }),
    (e = t.find("tbody tr th input.trackall"))
      .unbind("click")
      .click(function () {
        $(this).is(":checked")
          ? ($(this).css({ opacity: 1 }),
            ($trs = $(this).parent().parent().parent().find("tr:gt(0)")),
            $.each($trs, function (t, e) {
              var a = parseInt($(e).attr("n"));
              map.HideShowMarker(!0, a),
                map_locate(a, !1, !1, !1, !1),
                $(e).find("td:eq(0) input").prop("checked", !0),
                $(e).find("td:eq(1) input").prop("checked", !0);
              var i = findpageitems(a);
              $.each(i, function (t, e) {
                $(e).find("td:eq(0) input").prop("checked", !0),
                  $(e).find("td:eq(1) input").prop("checked", !0);
              });
            }),
            $(this)
              .parent()
              .parent()
              .parent()
              .find("tr th input.showall")
              .css({ opacity: 1 })
              .prop("checked", !0))
          : ($(this).css({ opacity: 0.5 }),
            ($trs = $(this).parent().parent().parent().find("tr:gt(0)")),
            $.each($trs, function (t, e) {
              var a = parseInt($(e).attr("n"));
              map.ClearTrack(a),
                $(e).find("td:eq(1) input").prop("checked", !1);
              var i = findpageitems(a);
              $.each(i, function (t, e) {
                $(e).find("td:eq(1) input").prop("checked", !1);
              });
            }));
      }),
    $.each(ChangeItems, function (t, e) {
      $(e)
        .find("td:first-child input")
        .unbind("click")
        .click(function () {
          $tr = $(e).closest("tr");
          var t = parseInt($tr.attr("n"));
          if ($(this).is(":checked")) {
            map.HideShowMarker(!0, t), map_locate(t, !0, !0, !1, !1);
            var a = findpageitems(t);
            $.each(a, function (t, e) {
              $(e).find("td:eq(0) input").prop("checked", !0);
            });
          } else {
            map.HideShowMarker(!1, t),
              map.ClearTrack(t),
              $(e).find("td:eq(1) input").prop("checked", !1);
            a = findpageitems(t);
            $.each(a, function (t, e) {
              $(e).find("td:eq(0) input").prop("checked", !1),
                $(e).find("td:eq(1) input").prop("checked", !1);
            }),
              $(e)
                .parent()
                .find("tr:first-child th:first-child input")
                .prop("checked", !1)
                .css({ opacity: 0.5 });
          }
        });
    }),
    $.each(ChangeItems, function (t, e) {
      $(e)
        .find("td:eq(1) input")
        .unbind("click")
        .click(function () {
          $tr = $(e).closest("tr");
          var t = parseInt($tr.attr("n"));
          if ($(this).is(":checked")) {
            map.HideShowMarker(!0, t),
              map_locate(t, !0, !0, !1, !1),
              $(e).find("td:first-child input").prop("checked", !0);
            var a = findpageitems(t);
            $.each(a, function (t, e) {
              $(e).find("td:eq(0) input").prop("checked", !0),
                $(e).find("td:eq(1) input").prop("checked", !0);
            });
          } else {
            map.ClearTrack(t);
            a = findpageitems(t);
            $.each(a, function (t, e) {
              $(e).find("td:eq(1) input").prop("checked", !1);
            }),
              $(e)
                .parent()
                .find("tr:first-child th:eq(1) input")
                .prop("checked", !1)
                .css({ opacity: 0.5 });
          }
        });
    }),
    $.each(ChangeItems, function (t, e) {
      $(e)
        .find("td:lt(6):gt(1)")
        .unbind("click")
        .click(function () {
          $(".active").removeClass("active"),
            $(".active").next().removeClass("active"),
            $(".gractive").removeClass("gractive"),
            $(".hover").removeClass("hover"),
            $(".hover").next().removeClass("hover"),
            ($lastselect = $(e).closest("tr")).addClass("active"),
            $lastselect.next().addClass("active");
          var t = parseInt($lastselect.attr("n"));
          (current_id = t),
            map.HideShowMarker(!0, t),
            map_locate(t, !0, !0, !1, !0),
            $lastselect.find("td:first-child input").prop("checked", !0);
          var a = findpageitems(t);
          $.each(a, function (t, e) {
            $(e).find("td:eq(0) input").prop("checked", !0);
          });
        });
    }),
    $.each(ChangeItems, function (t, e) {
      $(e)
        .unbind("hover")
        .hover(
          function (t) {
            ($lastselect = $(this)).hasClass("active") ||
              ($lastselect.addClass("hover"),
              $lastselect.next().addClass("hover"));
            var e = parseInt($lastselect.attr("n"));
            link_marker(e);
          },
          function () {
            $(".hover").removeClass("hover"),
              $(".hover").next().removeClass("hover");
            parseInt($lastselect.attr("n"));
          }
        );
    }),
    $.each(ChangeItems, function (t, e) {
      e.parent().find("th").hasClass("open") && updateOne(e);
    }),
    updateStatusCount();
  var a = getAllAlarm();
  void 0 !== a && a > 0
    ? (a > 10 && (a = "10+"),
      $("#alarm_msg").html(
        "<a href='#'>" + JS_TIP_OBJ_ALARM + "(" + a + ")</a>"
      ),
      $("#alarm_msg").css("background-image", 'url("../img/alarm.svg")'),
      $("#alarm_msg a").css("color", "red"))
    : ($("#alarm_msg").html("<a href='#'>" + JS_TIP_OBJ_ALARM + "(0)</a>"),
      $("#alarm_msg").css("background-image", 'url("../img/alarm_off.svg ")'),
      $("#alarm_msg a").css("color", "white")),
    $("#alarm_msg")
      .unbind("click")
      .click(function () {
        dlgAlarmInfo();
      });
}
function updateStatusCount() {
  $.each($("#mod ul li"), function (t, e) {
    var a = $($(e).attr("target") + " tbody tr:not(tr:first-child)"),
      i = $(e).find("a");
    i.text(i.attr("title") + "(" + parseInt(a.length / 2) + ")");
    var o = $($(e).attr("target") + " tbody tr:first-child");
    $.each(o, function (t, e) {
      var a = $(e).parent().find("[s='0']"),
        i = $(e).parent().find("[s]");
      $(e)
        .find("th:eq(2)")
        .text(
          $(e).attr("t") + " [" + (i.length - a.length) + "/" + i.length + "]"
        );
    });
  });
}
function releaseTrack(t) {
  (current_id = 0),
    $(".active").removeClass("active"),
    $(".gractive").removeClass("gractive");
}
function cancelDefShowAll() {
  needShowAllAsset = 0;
}
function updateDevice(t, e, a, i) {
  var o = null != t && void 0 !== t && t.length > 0;
  void 0 !== i &&
    1 == i &&
    ($lastselect && ($lastselect = null),
    clearList("tree_all"),
    clearList("tree_online"),
    clearList("tree_offline"),
    clearList("tree_expired"),
    clearArray(Groups),
    clearArray(GroupItem));
  try {
    if (o) {
      clearArray(ChangeItems), (ChangeItems = new Array());
      for (var n = 0; n < t.length; n++) addGroup(t[n], e, a, i);
      $("#race_details tbody").empty(),
        ($tbody = $("<tbody></tbody>").appendTo("#race_details"));
      for (var r = 0; r < race_array.length; r++) {
        var s = race_array[r];
        if (null != s && void 0 !== s.attr("c") && null != s.attr("c")) {
          var l = s.attr("c"),
            d = (s.find("td:eq(2)").attr("y") / 1e6).toFixed(6),
            p = (s.find("td:eq(2)").attr("x") / 1e6).toFixed(6),
            c = s.attr("sval"),
            h = s.attr("io"),
            u = getIdValue("F6:", h, !0),
            _ = getIdValue("F7:", h, !0),
            m = getIdValue("125:", h, !0),
            g = getIdValue("124:", h, !0),
            f = getIdValue("122:", h, !0),
            v = getIdValue("123:", h, !0);
          ($tr = $("<tr></tr>").appendTo($tbody)),
            $("<td></td>")
              .html("<span>" + l + "</span>")
              .appendTo($tr),
            $("<td></td>")
              .html("<span>" + d + "," + p + "</span>")
              .appendTo($tr),
            null != u && null != _
              ? ($("<td></td>")
                  .html(
                    "<span>" +
                      ((parseFloat(u) * parseFloat(_)) / 100).toFixed(3) +
                      "</span>"
                  )
                  .appendTo($tr),
                $("<td></td>")
                  .html(
                    "<span>" +
                      (u - (parseFloat(u) * parseFloat(_)) / 100).toFixed(3) +
                      "</span>"
                  )
                  .appendTo($tr))
              : ($("<td></td>").html("---").appendTo($tr),
                $("<td></td>").html("---").appendTo($tr)),
            $("<td></td>")
              .html("<span>" + c + "</span>")
              .appendTo($tr),
            0 == r
              ? ($("<td></td>")
                  .html("<span>" + (null == m ? "---" : m) + "</span>")
                  .appendTo($tr),
                $("<td></td>")
                  .html(
                    "<span>" + (null == g ? "---" : second2time(g)) + "</span>"
                  )
                  .appendTo($tr))
              : ($("<td></td>")
                  .html("<span>" + (null == f ? "---" : f) + "</span>")
                  .appendTo($tr),
                $("<td></td>")
                  .html(
                    "<span>" + (null == v ? "---" : second2time(v)) + "</span>"
                  )
                  .appendTo($tr));
        }
      }
    }
  } finally {
    o && (a.RefreshClusters(), updateShow());
  }
}
function getOnlineNumber() {
  return $("#tree_online tbody tr[s]").length;
}
function getOfflineNumber() {
  return $("#tree_offline tbody tr[s]").length;
}
function getExpiredNumber() {
  return $("#tree_expired tbody tr[s]").length;
}
function getExpireObjByDays() {
  var t = { ex_30: [], ex_15: [], ex_7: [], ex_1: [], ex_0: [] },
    e = $("#tree_all tbody tr:not(tr:first-child)");
  return (
    $(e).each(function (e, a) {
      if (null != $(a).find("td:eq(2)").attr("ex")) {
        var i =
          (newDate($(a).find("td:eq(2)").attr("ex")).getTime() -
            new Date().getTime()) /
          864e5;
        i <= 0
          ? t.ex_0.push($(a).find("td:eq(2)").attr("c"))
          : i <= 1
          ? t.ex_1.push($(a).find("td:eq(2)").attr("c"))
          : i <= 7
          ? t.ex_7.push($(a).find("td:eq(2)").attr("c"))
          : i <= 15
          ? t.ex_15.push($(a).find("td:eq(2)").attr("c"))
          : i <= 30 && t.ex_30.push($(a).find("td:eq(2)").attr("c"));
      }
    }),
    t
  );
}
function getAlarmCarNumber() {
  var t = 0,
    e = $("#tree_online tbody tr:not(tr:first-child)");
  return (
    $(e).each(function (e, a) {
      $(a).find("td:eq(6)").attr("a") > 0 && t++;
    }),
    t
  );
}
function getShowObjs() {
  var t = [],
    e = $("#tree_all tbody tr:not(tr:first-child)");
  return (
    $(e).each(function (e, a) {
      $(a).find("td:eq(0) input").is(":checked") && t.push($(a).attr("n"));
    }),
    t
  );
}
function getMovingStopCarNumber() {
  var t = [],
    e = 0,
    a = 0,
    i = 0,
    o = { s_0_40: [], s_40_80: [], s_80_90: [], s_90_120: [], s_120: [] },
    n = $("#tree_online tbody tr:not(tr:first-child)");
  return (
    $(n).each(function (t, n) {
      var r = $(n).attr("sval");
      r > 0 ? e++ : a++,
        30 == $(n).attr("s") && i++,
        r >= 0 && r <= 40
          ? o.s_0_40.push($(n).find("td:eq(2)").attr("c"))
          : r > 40 && r <= 80
          ? o.s_40_80.push($(n).find("td:eq(2)").attr("c"))
          : r > 80 && r <= 90
          ? o.s_80_90.push($(n).find("td:eq(2)").attr("c"))
          : r > 90 && r <= 120
          ? o.s_90_120.push($(n).find("td:eq(2)").attr("c"))
          : r > 120 && o.s_120.push($(n).find("td:eq(2)").attr("c"));
    }),
    t.push(e),
    t.push(a),
    t.push(o),
    t.push(i),
    t
  );
}
function getTopMileageEngine() {
  var t = [],
    e = [],
    a = $("#tree_all tbody tr:not(tr:first-child)");
  return (
    $(a).each(function (e, a) {
      var i = $(a).find("td:eq(2)").attr("io"),
        o = $(a).find("td:eq(2)").attr("zt"),
        n = $(a).find("td:eq(2)").attr("c"),
        r = $(a).attr("sval"),
        s = getIdValue("3F:", i),
        l = getIdValue("3E:", i),
        d = getIdValue("40:", i),
        p = getIdValue("3D:", i);
      null == s && (s = 0),
        (s = parseInt(mileageUnitConversion(s, JS_UNIT_DISTANCE))),
        "-1" != r &&
          null != o &&
          new Date().getTime() - newDate(o).getTime() < 864e5 &&
          t.push({
            c: n,
            m: null == s ? 0 : s,
            e: null == l ? 0 : parseFloat(l) / 3600,
            i: null == d ? 0 : parseFloat(d) / 3600,
            o: null == p ? 0 : parseFloat(p) / 3600,
          });
    }),
    e.push(t.sort(sortMileage).slice(0, 10)),
    e.push(t.sort(sortEngine).slice(0, 10)),
    e.push(t.sort(sortIdle).slice(0, 10)),
    e.push(t.sort(sortMoving).slice(0, 10)),
    e
  );
}
function sortMileage(t, e) {
  var a = t.m,
    i = e.m;
  return (
    isNaN(Number(a)) || isNaN(Number(i)) || ((a = Number(a)), (i = Number(i))),
    i - a
  );
}
function sortEngine(t, e) {
  var a = t.e,
    i = e.e;
  return (
    isNaN(Number(a)) || isNaN(Number(i)) || ((a = Number(a)), (i = Number(i))),
    i - a
  );
}
function sortIdle(t, e) {
  var a = t.i,
    i = e.i;
  return (
    isNaN(Number(a)) || isNaN(Number(i)) || ((a = Number(a)), (i = Number(i))),
    i - a
  );
}
function sortMoving(t, e) {
  var a = t.o,
    i = e.o;
  return (
    isNaN(Number(a)) || isNaN(Number(i)) || ((a = Number(a)), (i = Number(i))),
    i - a
  );
}
function getAllAlarm() {
  var t = 0,
    e = $("#tree_all tbody tr:not(tr:first-child)");
  return (
    $(e).each(function (e, a) {
      var i = $(a).find("td:eq(6)").attr("a");
      void 0 !== i && null != i && (t += parseInt(i));
    }),
    t
  );
}
function getAllNumber() {
  return $("#tree_all tbody tr[s]").length;
}
function createObjStateBar(t, e, a, i, o, n, r, s, l, d, p, c, h, u) {
  $("#dlg_objstatechart .content").empty();
  var _, m, g, f, v, x;
  Highcharts.chart("sta_on_off_exp", {
    credits: { enabled: !1 },
    exporting: { enabled: !1 },
    chart: { spacing: [0, 0, 0, 0], margin: [5, 5, 5, 5] },
    title: {
      floating: !1,
      text: JS_OBJECTS,
      style: { fontSize: "12px", fontWeight: "bold" },
      align: "left",
      x: "5",
      y: "15",
    },
    tooltip: { pointFormat: "{point.y}" },
    plotOptions: {
      pie: {
        allowPointSelect: !0,
        cursor: "pointer",
        size: 110,
        dataLabels: {
          enabled: !0,
          align: "left",
          format: "{point.name}: {point.y}",
          distance: 10,
          style: {
            textOverflow: "none",
            fontWeight: "normal",
            color:
              (Highcharts.theme && Highcharts.theme.contrastTextColor) ||
              "black",
          },
        },
      },
      connectorPadding: 10,
    },
    series: [
      {
        type: "pie",
        innerSize: "50%",
        data: [
          {
            name: JS_TIP_OBJ_ONLINE,
            x: e,
            y: e,
            color: "#4DA74D",
            sliced: !0,
            selected: !0,
          },
          { name: JS_TIP_OBJ_OFFLINE, x: a, y: a, color: "gray" },
          { name: JS_TIP_OBJ_EXPIRED, x: o, y: o, color: "#EDC240" },
        ],
      },
    ],
  }),
    Highcharts.chart("sta_mov_sti_alm", {
      credits: { text: "", href: "" },
      exporting: { enabled: !1 },
      chart: { spacing: [0, 0, 0, 0], margin: [5, 5, 5, 5] },
      title: {
        floating: !0,
        text: "",
        style: { fontSize: "12px" },
        align: "left",
      },
      tooltip: { pointFormat: "{point.y}" },
      plotOptions: {
        pie: {
          allowPointSelect: !0,
          cursor: "pointer",
          size: 110,
          dataLabels: {
            enabled: !0,
            align: "left",
            format: "{point.name}: {point.y}",
            distance: 10,
            style: {
              textOverflow: "none",
              fontWeight: "normal",
              color:
                (Highcharts.theme && Highcharts.theme.contrastTextColor) ||
                "black",
            },
          },
        },
        connectorPadding: 10,
      },
      series: [
        {
          type: "pie",
          innerSize: "50%",
          data: [
            {
              name: JS_MOVING,
              x: n,
              y: n,
              color: "#2CA089",
              sliced: !0,
              selected: !0,
            },
            { name: JS_STATIC, x: r, y: r, color: "#73D300" },
            { name: JS_IDLE, x: l, y: l, color: "#FF7F2A" },
            { name: JS_TIP_OBJ_ALARM, x: i, y: i, color: "#CB4B4B" },
          ],
        },
      ],
    });
  (_ = Highcharts).wrap(_.Tooltip.prototype, "getLabel", function (t) {
    var e = t.apply(this, Array.prototype.slice.call(arguments, 1));
    return this.container && _.css(this.container, { zIndex: 9999 }), e;
  }),
    u.ex_0.length <= 30 ? (m = u.ex_0) : (m = u.ex_0.slice(0, 30)).push("..."),
    u.ex_1.length <= 30 ? (g = u.ex_1) : (g = u.ex_1.slice(0, 30)).push("..."),
    u.ex_7.length <= 30 ? (f = u.ex_7) : (f = u.ex_7.slice(0, 30)).push("..."),
    u.ex_15.length <= 30
      ? (v = u.ex_15)
      : (v = u.ex_15.slice(0, 30)).push("..."),
    u.ex_30.length <= 30
      ? (x = u.ex_30)
      : (x = u.ex_30.slice(0, 30)).push("...");
  var y,
    T,
    S,
    b,
    E,
    I = [m, g, f, v, x];
  Highcharts.chart("sta_exp_time", {
    credits: { text: "", href: "" },
    exporting: { enabled: !1 },
    chart: { spacing: [0, 0, 0, 0], margin: [5, 5, 5, 5] },
    title: {
      floating: !0,
      text: "",
      style: { fontSize: "12px" },
      align: "left",
    },
    tooltip: {
      outside: !0,
      pointFormatter: function () {
        var t = "";
        return (
          Highcharts.each(I[this.series.data.indexOf(this)], function (e) {
            t += '<a href = "">' + e + "</a><br>";
          }),
          "<br>" + t + "<br />"
        );
      },
    },
    plotOptions: {
      pie: {
        allowPointSelect: !0,
        cursor: "pointer",
        size: 110,
        dataLabels: {
          enabled: !0,
          align: "left",
          format: "{point.name}: {point.y}",
          distance: 10,
          style: {
            textOverflow: "none",
            fontWeight: "normal",
            color:
              (Highcharts.theme && Highcharts.theme.contrastTextColor) ||
              "black",
          },
        },
      },
      connectorPadding: 10,
    },
    series: [
      {
        type: "pie",
        innerSize: "50%",
        data: [
          {
            name: JS_EXPIRE_0,
            x: u.ex_0.length,
            y: u.ex_0.length,
            color: "#DC143C",
            sliced: !0,
            selected: !0,
          },
          {
            name: JS_EXPIRE_1,
            x: u.ex_1.length,
            y: u.ex_1.length,
            color: "#FF00FF",
          },
          {
            name: JS_EXPIRE_7,
            x: u.ex_7.length,
            y: u.ex_7.length,
            color: "#C71585",
          },
          {
            name: JS_EXPIRE_15,
            x: u.ex_15.length,
            y: u.ex_15.length,
            color: "#FFD700",
          },
          {
            name: JS_EXPIRE_30,
            x: u.ex_30.length,
            y: u.ex_30.length,
            color: "#00FF99",
          },
        ],
      },
    ],
  });
  s.s_0_40.length <= 30
    ? (y = s.s_0_40)
    : (y = s.s_0_40.slice(0, 30)).push("..."),
    s.s_40_80.length <= 30
      ? (T = s.s_40_80)
      : (T = s.s_40_80.slice(0, 30)).push("..."),
    s.s_80_90.length <= 30
      ? (S = s.s_80_90)
      : (S = s.s_80_90.slice(0, 30)).push("..."),
    s.s_90_120.length <= 30
      ? (b = s.s_90_120)
      : (b = s.s_90_120.slice(0, 30)).push("..."),
    s.s_120.length <= 30
      ? (E = s.s_120)
      : (E = s.s_120.slice(0, 30)).push("...");
  var w = [y, T, S, b, E],
    k =
      (Highcharts.chart("sta_speed_range", {
        credits: { text: "", href: "" },
        exporting: { enabled: !1 },
        chart: { spacing: [0, 0, 0, 0], margin: [5, 5, 5, 5] },
        title: {
          floating: !0,
          text: "",
          style: { fontSize: "12px" },
          align: "left",
        },
        tooltip: {
          outside: !0,
          pointFormatter: function () {
            var t = "";
            return (
              Highcharts.each(w[this.series.data.indexOf(this)], function (e) {
                t += '<a href = "">' + e + "</a><br>";
              }),
              "<br>" + t + "<br />"
            );
          },
        },
        plotOptions: {
          pie: {
            allowPointSelect: !0,
            cursor: "pointer",
            size: 110,
            dataLabels: {
              enabled: !0,
              align: "left",
              format: "{point.name}: {point.y}",
              distance: 10,
              style: {
                textOverflow: "none",
                fontWeight: "normal",
                color:
                  (Highcharts.theme && Highcharts.theme.contrastTextColor) ||
                  "black",
              },
            },
          },
          connectorPadding: 10,
        },
        series: [
          {
            type: "pie",
            innerSize: "50%",
            data: [
              {
                name: JS_SPEED_0_40,
                x: s.s_0_40.length,
                y: s.s_0_40.length,
                color: "#5DFEFE",
                sliced: !0,
                selected: !0,
              },
              {
                name: JS_SPEED_40_80,
                x: s.s_40_80.length,
                y: s.s_40_80.length,
                color: "#0096FE",
              },
              {
                name: JS_SPEED_80_90,
                x: s.s_80_90.length,
                y: s.s_80_90.length,
                color: "#3200FF",
              },
              {
                name: JS_SPEED_90_120,
                x: s.s_90_120.length,
                y: s.s_90_120.length,
                color: "#9A009C",
              },
              {
                name: JS_SPEED_120,
                x: s.s_120.length,
                y: s.s_120.length,
                color: "#FF002A",
              },
            ],
          },
        ],
      }),
      [
        "#8E468E",
        "#D64646",
        "#008E8E",
        "#FF8E46",
        "#8BBA00",
        "#AFD8F8",
        "#F6BD0F",
        "#B6BD0F",
        "#4CCA00",
        "#1CBA00",
      ]),
    A = [],
    C = [],
    D = [],
    L = [],
    J = [],
    O = [],
    N = [],
    F = [];
  for (j = 0; j < d.length; j++)
    if (d[j].m > 0.1) {
      var M = { color: k[j], y: d[j].m };
      A.push(d[j].c), C.push(M);
    }
  for (j = 0; j < p.length; j++)
    if (p[j].e > 0.1) {
      M = { color: k[j], y: p[j].e };
      D.push(p[j].c), L.push(M);
    }
  for (j = 0; j < c.length; j++)
    if (c[j].i > 0.1) {
      M = { color: k[j], y: c[j].i };
      J.push(c[j].c), O.push(M);
    }
  for (j = 0; j < h.length; j++)
    if (h[j].o > 0.1) {
      M = { color: k[j], y: h[j].o };
      N.push(h[j].c), F.push(M);
    }
  Highcharts.chart("sta_last24h_mileage", {
    credits: { text: "", href: "" },
    exporting: { enabled: !1 },
    chart: { type: "column" },
    title: {
      text: JS_LAST24H_MILEAGE,
      style: { fontSize: "12px", fontWeight: "bold" },
      align: "left",
    },
    subtitle: { text: "", style: { display: "none" } },
    xAxis: { categories: A, title: { text: null } },
    yAxis: { min: 0, title: { text: JS_MILEAGE + "(" + UNIT_DIST + ")" } },
    legend: { enabled: !1 },
    tooltip: { pointFormat: "{point.y:.1f}(" + UNIT_DIST + ")" },
    series: [{ data: C }],
  }),
    Highcharts.chart("sta_last24h_engine", {
      credits: { text: "", href: "" },
      exporting: { enabled: !1 },
      chart: { type: "column" },
      title: {
        text: JS_LAST24H_ENGINE,
        style: { fontSize: "12px", fontWeight: "bold" },
        align: "left",
      },
      subtitle: { text: "", style: { display: "none" } },
      xAxis: { categories: D, title: { text: null } },
      yAxis: { min: 0, title: { text: JS_HOUR + "(h)" } },
      legend: { enabled: !1 },
      tooltip: { pointFormat: "{point.y:.1f}(h)" },
      series: [{ data: L }],
    }),
    Highcharts.chart("sta_last24h_idle", {
      credits: { text: "", href: "" },
      exporting: { enabled: !1 },
      chart: { type: "column" },
      title: {
        text: JS_LAST24H_IDLE,
        style: { fontSize: "12px", fontWeight: "bold" },
        align: "left",
      },
      subtitle: { text: "", style: { display: "none" } },
      xAxis: { categories: J, title: { text: null } },
      yAxis: { min: 0, title: { text: JS_HOUR + "(h)" } },
      legend: { enabled: !1 },
      tooltip: { pointFormat: "{point.y:.1f}(h)" },
      series: [{ data: O }],
    }),
    Highcharts.chart("sta_last24h_moving", {
      credits: { text: "", href: "" },
      exporting: { enabled: !1 },
      chart: { type: "column" },
      title: {
        text: JS_LAST24H_MOVING,
        style: { fontSize: "12px", fontWeight: "bold" },
        align: "left",
      },
      subtitle: { text: "", style: { display: "none" } },
      xAxis: { categories: N, title: { text: null } },
      yAxis: { min: 0, title: { text: JS_HOUR + "(h)" } },
      legend: { enabled: !1 },
      tooltip: { pointFormat: "{point.y:.1f}(h)" },
      series: [{ data: F }],
    });
}
function createLast5daysMiEgBar(t, e, a, i) {
  var o = [
      "#8E468E",
      "#D64646",
      "#008E8E",
      "#FF8E46",
      "#8BBA00",
      "#AFD8F8",
      "#F6BD0F",
      "#B6BD0F",
      "#4CCA00",
      "#1CBA00",
    ],
    n = [
      "#EFC342",
      "#ADDBFF",
      "#CE494A",
      "#4AA64A",
      "#9441EF",
      "#AFD8F8",
      "#F6BD0F",
      "#B6BD0F",
      "#4CCA00",
      "#1CBA00",
    ],
    r = [],
    s = [],
    l = [],
    d = [],
    p = [],
    c = [],
    h = objLastMiEg[t];
  if (null != h) {
    for (j = 0; j < h.length; j++) {
      var u = { color: o[j], y: h[j].MILEAGE / 1e3 };
      r.push(h[j].COLLECT_DATE.split("-")[2]), s.push(u);
    }
    for (j = 0; j < h.length; j++) {
      u = { color: n[j], y: h[j].DRIVING_TIME / 3600 };
      l.push(h[j].COLLECT_DATE.split("-")[2]), d.push(u);
    }
    for (j = 0; j < h.length; j++) {
      u = { color: n[j], y: h[j].LOAD_TIME / 3600 };
      p.push(h[j].COLLECT_DATE.split("-")[2]), c.push(u);
    }
    Highcharts.chart("sta_last5day_mileage", {
      credits: { text: "", href: "" },
      exporting: { enabled: !1 },
      chart: {
        type: "column",
        spacingTop: 5,
        spacingRight: 0,
        spacingBottom: 0,
        spacingLeft: 0,
        plotBorderWidth: 0,
      },
      title: { text: "", style: { display: "none" } },
      subtitle: { text: "", style: { display: "none" } },
      plotOptions: { series: { animation: !1 } },
      xAxis: { categories: r, title: { text: null } },
      yAxis: { min: 0, title: { text: null } },
      legend: { enabled: !1 },
      tooltip: { pointFormat: "{point.y:.1f}(" + UNIT_DIST + ")" },
      series: [{ data: s }],
    }),
      Highcharts.chart("sta_last5day_engine", {
        credits: { text: "", href: "" },
        exporting: { enabled: !1 },
        chart: {
          type: "column",
          spacingTop: 5,
          spacingRight: 0,
          spacingBottom: 0,
          spacingLeft: 0,
          plotBorderWidth: 0,
        },
        title: { text: "", style: { display: "none" } },
        subtitle: { text: "", style: { display: "none" } },
        xAxis: { categories: l, title: { text: null } },
        plotOptions: { series: { animation: !1 } },
        yAxis: { min: 0, title: { text: null } },
        legend: { enabled: !1 },
        tooltip: { pointFormat: "{point.y:.1f}(h)" },
        series: [{ data: d }],
      }),
      Highcharts.chart("sta_last5day_load", {
        credits: { text: "", href: "" },
        exporting: { enabled: !1 },
        chart: {
          type: "column",
          spacingTop: 5,
          spacingRight: 0,
          spacingBottom: 0,
          spacingLeft: 0,
          plotBorderWidth: 0,
        },
        title: { text: "", style: { display: "none" } },
        subtitle: { text: "", style: { display: "none" } },
        xAxis: { categories: p, title: { text: null } },
        plotOptions: { series: { animation: !1 } },
        yAxis: { min: 0, title: { text: null } },
        legend: { enabled: !1 },
        tooltip: { pointFormat: "{point.y:.1f}(h)" },
        series: [{ data: c }],
      });
  }
}
function createSpeedometer(t) {
  var e = document.getElementById("sta_speedometer"),
    a = new Donut(e).setOptions({
      angle: 0.23,
      lineWidth: 0.1,
      radiusScale: 1,
      pointer: {
        length: 0.49,
        strokeWidth: 0.042,
        color: "#2B82D4",
        augeArea: { margin: 0 },
      },
      limitMax: !1,
      limitMin: !1,
      colorStart: "#2B82D4",
      colorStop: "#2B82D4",
      strokeColor: "#C4C4C4",
      generateGradient: !0,
      highDpiSupport: !0,
    });
  (a.maxValue = 250), a.setMinValue(0), (a.animationSpeed = 32), a.set(t);
}
function createTiresensorBar(t, e, a, i) {
  Highcharts.chart("sta_tiresensor", {
    chart: { zoomType: "xy" },
    credits: { text: "", href: "" },
    exporting: { enabled: !1 },
    chart: {
      type: "column",
      spacingTop: 5,
      spacingRight: 0,
      spacingBottom: 0,
      spacingLeft: 0,
      plotBorderWidth: 0,
    },
    title: { text: "", style: { display: "none" } },
    subtitle: { text: "", style: { display: "none" } },
    xAxis: [{ categories: t, crosshair: !0 }],
    yAxis: [
      {
        gridLineWidth: 0,
        title: { text: JS_TIRE_PRESSURE, style: { color: "#5D8AA8" } },
        labels: { format: "{value} " + UNIT_TPMS, style: { color: "#5D8AA8" } },
      },
      {
        labels: { format: "{value}" + UNIT_TEMP, style: { color: "#FA8523" } },
        title: { text: JS_TEMP, style: { color: "#FA8523" } },
        opposite: !0,
      },
    ],
    tooltip: { shared: !0 },
    legend: { enabled: !1 },
    series: [
      {
        name: JS_TIRE_PRESSURE,
        type: "spline",
        data: e,
        tooltip: { valueSuffix: " " + UNIT_TPMS },
        color: "#5D8AA8",
      },
      {
        name: JS_TEMP,
        type: "spline",
        yAxis: 1,
        data: a,
        tooltip: { valueSuffix: " " + UNIT_TEMP },
        color: "#FA8523",
      },
    ],
  });
}
